import telebot
from telebot import types
import logging
import sqlite3
import time
import threading
import requests
import firebase_admin
import os
from firebase_admin import credentials, db, storage
import random
import re
import json
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

cred = credentials.Certificate("privKey/tours-in-buenos-aires-firebase-adminsdk-yqt2b-5f2d7a4242.json")
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://tours-in-buenos-aires-default-rtdb.firebaseio.com',
    'storageBucket': 'stours-in-buenos-aires.appspot.com'
})

database = db.reference()
bucket = storage.bucket('tours-in-buenos-aires.appspot.com')

bot = telebot.TeleBot('7346257604:AAGqNiMLG1qnHIMFyytYbvdN6CYwrM17EHY')  # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_API_KEY –Ω–∞ –≤–∞—à –∫–ª—é—á
language = {}
code_entering = {}

user_state = {}
user_data = {}

all_excursions = {}
block_name = {} # –î–ª—è –∑–∞–º–µ–Ω—ã –∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
NOACT, PIN, START, ADDMIN_CODE, ADD_BLOCK_CODE, TOUR_CODE, CHOOSE_LANGUAGE, ADD_BLOCK_NAME, ADD_DESCRIPTION_MAIN, ADD_ORDER, CONF_AUDIO, ADD_AUDIO, CONF_PHOTO, ADD_PHOTO, ADDMIN_CODE_SAVE, SHORT_NAME, ADD_DESCRIPTION, CONFIRM_AUDIO = range(18)

MESSAGE_IDS_FILE = "message_ids.json"
commands = [
    types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    #,
    #types.BotCommand("help", "–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"),
    #types.BotCommand("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
]

bot.set_my_commands(commands)

def add_message_id(chat_id, message_id):
    try:
        with open(MESSAGE_IDS_FILE, "r") as file:
            data = json.load(file)
    except FileNotFoundError:
        data = {}
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º chat_id –≤ —Å—Ç—Ä–æ–∫—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ –∫–ª—é—á JSON
    chat_id_str = str(chat_id)
    if chat_id_str not in data:
        data[chat_id_str] = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ message_id –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
    if message_id not in data[chat_id_str]:
        data[chat_id_str].append(message_id)

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    with open(MESSAGE_IDS_FILE, "w") as file:
        json.dump(data, file)

def generate_random_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π 4-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ü–∏—Ñ—Ä."""
    return ''.join(random.choices("0123456789", k=4))

def reset_all_codes():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ `block_id` –¥–ª—è –≤—Å–µ—Ö `blocks` –Ω–∞ –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥."""
    blocks_ref = database.child('blocks').get()

    if blocks_ref:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        for block_id, block_data in blocks_ref.items():
            new_code = generate_random_code()
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –±–ª–æ–∫ —Å –Ω–æ–≤—ã–º –∫–æ–¥–æ–º –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±–ª–æ–∫
            database.child('blocks').child(new_code).set(block_data)
            database.child('blocks').child(block_id).delete()
            #print(f"–ö–æ–¥ –¥–ª—è –±–ª–æ–∫–∞ {block_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_code}")
    #else:
        #print("–ë–ª–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

    #print("–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∑–∞–≤–µ—Ä—à—ë–Ω.")

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
def clear_message_ids_file():
    """–û—á–∏—â–∞–µ—Ç JSON —Ñ–∞–π–ª, –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –µ–≥–æ –ø—É—Å—Ç—ã–º –æ–±—ä–µ–∫—Ç–æ–º."""
    with open(MESSAGE_IDS_FILE, "w") as file:
        json.dump({}, file)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def delete_messages():
    try:
        with open(MESSAGE_IDS_FILE, "r") as file:
            message_data = json.load(file)
    except FileNotFoundError:
        #print("–§–∞–π–ª —Å ID —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    for chat_id, message_ids in message_data.items():
        failed_deletions = []
        for message_id in message_ids:
            try:
                bot.delete_message(chat_id, message_id)
                #print(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
            except telebot.apihelper.ApiException as e:
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
                error_message = str(e)
                if "message to delete not found" in error_message or "message can't be deleted" in error_message:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} –≤ —á–∞—Ç–µ {chat_id}: {error_message}")
                else:
                    failed_deletions.append(message_id)

        # –£–¥–∞–ª—è–µ–º –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã
        message_data[chat_id] = failed_deletions

    # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º JSON-—Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
    with open(MESSAGE_IDS_FILE, "w") as file:
        json.dump(message_data, file)
    #print("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
def load_admin_code():
    global adm_code
    if os.path.exists("admin_code.txt"):
        with open("admin_code.txt", "r") as file:
            adm_code = file.read().strip()
    else:
        adm_code = "123456"  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Ñ–∞–π–ª
def save_admin_code(new_code):
    with open("admin_code.txt", "w") as file:
        file.write(new_code)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–¥ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
load_admin_code()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    bot.send_message(message.chat.id, "¬°Bienvenido!", reply_markup=types.ReplyKeyboardRemove())
    global code_entering, user_state, all_excursions, block_name, chat_ids_users 
    block_name[message.chat.id] = ""
    code_entering[message.chat.id] = 0
    markup2 = types.InlineKeyboardMarkup()
    
    btn1 = types.InlineKeyboardButton("Espa√±ol üá¶üá∑", callback_data="language_spanish")
    btn2 = types.InlineKeyboardButton("English üá∫üá∏", callback_data="language_english")
    btn3 = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="language_russian")
    
    markup2.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, text="Por favor, seleccione su idioma üá¶üá∑ \nPlease, choose your language üá∫üá∏ \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ üá∑üá∫ ", reply_markup=markup2)
    logger.info(f"Displayed language options to {message.from_user.first_name}.")
    user_state[message.chat.id] = NOACT

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("language_"))
def handle_language_selection(call):
    global language  # –î–µ–ª–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≥–ª–æ–±–∞–ª—å–Ω–æ–π, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
    language[call.message.chat.id] = call.data.split("_")[1]
    global code_entering, user_state
    code_entering[call.message.chat.id] = 0
    enter_code(call.message)
    logger.info(f"{call.from_user.first_name} selected language: {language[call.message.chat.id].capitalize()}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
def enter_code(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    global code_entering, all_excursions 
    all_excursions[message.chat.id] = database.child('blocks').get()
    code_entering[message.chat.id] = 1
    if language[message.chat.id] == "spanish":
        but = "Volver a la selecci√≥n de idioma"
        resp = "Ingrese el c√≥digo de excursi√≥n. Si no lo conoces ¬°preg√∫ntale a tu gu√≠a!"
    elif language[message.chat.id] == "english":
        but ="Return to language selection"
        resp = "Enter the tour code. If you don't know it, ask the guide!"
    elif language[message.chat.id] == "russian":
        but ="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"
        resp = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –ï—Å–ª–∏ –æ–Ω –≤–∞–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, —Å–ø—Ä–æ—Å–∏—Ç–µ —É –≥–∏–¥–∞!"
    button1 = types.KeyboardButton(but)
    markup.add(button1)
    bot.send_message(message.chat.id, text=resp, reply_markup=markup)
    logger.info(f"Prompted {message.from_user.first_name} to enter code in {language[message.chat.id].capitalize()}.")
    user_state[message.chat.id] = NOACT

def enter_code_repeat(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    global code_entering
    code_entering[message.chat.id] = 1
    if language[message.chat.id] == "spanish":
        but = "Volver a la selecci√≥n de idioma"
        resp = "Intentar otra vez"
    elif language[message.chat.id] == "english":
        but ="Return to language selection"
        resp = "Try again"
    elif language[message.chat.id] == "russian":
        but ="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞"
        resp = "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
    button1 = types.KeyboardButton(but)
    markup.add(button1)
    bot.send_message(message.chat.id, text=resp, reply_markup=markup)
    logger.info(f"Prompted {message.from_user.first_name} to enter code in {language[message.chat.id].capitalize()}.")

@bot.message_handler(func=lambda message: message.text in ("Gesti√≥n de excursiones", "Excursion management", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏"))
def admin_pannel(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language[message.chat.id] == "spanish":
        b1 = types.KeyboardButton("Lista de excursiones")
        b2 = types.KeyboardButton("Agregar un recorrido")
        b3 = types.KeyboardButton("Actualizar c√≥digos de tour")
        b4 = types.KeyboardButton("Cambiar el c√≥digo de administrador")
        b5 = types.KeyboardButton("Instruccion")
        b6 = types.KeyboardButton("Salida")
        markup.row(b1, b2)
        markup.row(b3, b4)
        markup.row(b5)
        markup.row(b6)
        bot.send_message(
            message.chat.id,
            text="¬°Excelente!\n"
                 "Esta es la ventana de gesti√≥n de excursiones. Para obtener m√°s informaci√≥n sobre las capacidades del administrador, puede hacer clic en el bot√≥n 'Instrucciones'\n"
                 "Si tienes alguna otra pregunta, escribe al desarrollador https://t.me/The_lord_of_the_dawn",
            reply_markup=markup
        )
    elif language[message.chat.id] == "english":
        b1 = types.KeyboardButton("List of tours")
        b2 = types.KeyboardButton("Add a tour")
        b3 = types.KeyboardButton("Update tour codes")
        b4 = types.KeyboardButton("Edit the admin code")
        b5 = types.KeyboardButton("Instruction")
        b6 = types.KeyboardButton("Exit")
        markup.row(b1, b2)
        markup.row(b3, b4)
        markup.row(b5)
        markup.row(b6)
        bot.send_message(
            message.chat.id,
            text="Great!\n"
                 "This is the excursion management window. To learn more about the admin's capabilities, you can click on the 'Instructions' button\n"
                 "If you have any other questions, write to the developer https://t.me/The_lord_of_the_dawn",
            reply_markup=markup
        )
    elif language[message.chat.id] == "russian":
        b1 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π")
        b2 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä")
        b3 = types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥—ã —ç–∫—Å–∫—É—Ä—Å–∏–π")
        b4 = types.KeyboardButton("–°–º–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–¥–∞")
        b5 = types.KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        b6 = types.KeyboardButton("–í—ã—Ö–æ–¥")
        markup.row(b1, b2)
        markup.row(b3, b4)
        markup.row(b5)
        markup.row(b6)
        bot.send_message(
            message.chat.id,
            text="–û—Ç–ª–∏—á–Ω–æ!\n"
                 "–≠—Ç–æ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞–¥–º–∏–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'\n"
                 "–ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É https://t.me/The_lord_of_the_dawn",
            reply_markup=markup
        )
    user_state[message.chat.id] = START

@bot.message_handler(func=lambda message: message.text in ("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "Instruction", "Instruccion"))
def instruction(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    lang = language.get(message.chat.id, "english")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    back_button_text = {
        "spanish": "Volver a la ventana de control",
        "english": "Return to the control window",
        "russian": "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    }.get(lang, "Return to the control window")
    
    b1 = types.KeyboardButton(back_button_text)
    markup.row(b1)
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —è–∑—ã–∫–µ
    instructions_text = {
    "spanish": ("Entonces, hay 6 botones en el men√∫.\n\n"
    "'Salir' lo llevar√° a la ventana de selecci√≥n de idioma.\n\n"
    "'Instrucciones': abre las instrucciones que est√°s leyendo actualmente.\n\n"
    "'Lista de excursiones' - le enviar√° a una ventana donde en los botones ver√° las excursiones ya a√±adidas con sus c√≥digos. Al hacer clic en "
    "en el bot√≥n con el nombre de la excursi√≥n (si la excursi√≥n existe en ruso, su nombre se muestra autom√°ticamente en el bot√≥n "
    "en ruso) mostrar√° el recorrido completo en todos los idiomas agregados, despu√©s de lo cual aparecer√°n los botones 'Eliminar' y 'Cambiar' "
    "El bot√≥n 'Eliminar' - despu√©s de la confirmaci√≥n - borrar√° la excursi√≥n de la base de datos. 'Editar' - lo llevar√° al men√∫ del editor. "
    "Podr√°s agregar un nuevo idioma para el tour (si no se ha agregado ya todo el ruso, ingl√©s y espa√±ol) o editar "
    "un recorrido en el idioma seleccionado en el que el recorrido ya existe. Si elige editar el recorrido, habr√° un men√∫ disponible para usted "
    "un editor completo para el t√≠tulo, descripci√≥n y por separado para cada bloque de excursi√≥n. Tambi√©n puedes eliminar una excursi√≥n en un idioma determinado."
    "y tambi√©n agregar o eliminar un bloque de excursi√≥n. Lea atentamente las instrucciones del bot y "
    "use botones a menos que el bot solicite lo contrario. Normalmente, este tipo de solicitud contendr√° la palabra 'Entrar'.\n\n"
    "'Agregar recorrido': esta es la funci√≥n de agregar una excursi√≥n. Agregar√° secuencialmente c√≥digo, idioma, nombre de la excursi√≥n (en un idioma determinado) "
    "descripci√≥n de la excursi√≥n (en un idioma determinado), nombre corto del bloque de excursi√≥n, audio (si es necesario), foto (si es necesario) "
    "el n√∫mero de serie del bloque de excursi√≥n (Agregue el n√∫mero de serie del bloque con mucho cuidado. Comience siempre con uno y "
    "A medida que agregas cada bloque siguiente, ve en orden ascendente uno [1, 2, 3...] hasta terminar de agregar un recorrido en ese idioma "
    "Al agregar un nuevo idioma para una excursi√≥n, comience a numerar primero seg√∫n el mismo esquema. Mantenga constante el orden de los bloques de excursi√≥n "
    "entre idiomas. El n√∫mero de serie no s√≥lo se encarga de ordenar los bloques de excursiones dentro de un idioma, sino que tambi√©n se muestra en los botones para seleccionar uno espec√≠fico "
    "puntos de cliente) y "
    "descripci√≥n del bloque. Tenga mucho cuidado al agregar una excursi√≥n. Lea atentamente los mensajes del chat sobre qu√© es exactamente "
    "Actualmente le pide que agregue. Si comete un error, agregue el archivo incorrecto o agregue archivos en el orden incorrecto "
    "en el que el bot los solicite, tendr√°s que agregarlo nuevamente o ir al editor de excursiones si has agregado un recorrido "
    "De una forma u otra, si a√∫n cometes un error y el bot se congela, haz clic en el men√∫ a la derecha de la ventana de entrada de texto y haz clic en /iniciar.\n\n"
    "'Actualizar c√≥digos de excursi√≥n': esta funci√≥n actualizar√° autom√°ticamente los c√≥digos de excursi√≥n y eliminar√° todos los archivos de excursi√≥n para los usuarios "
    "Puedes consultar nuevos c√≥digos en la ventana 'Lista de excursiones'. Recomendaci√≥n: actualiza los c√≥digos despu√©s de cada excursi√≥n "
    "El bot tiene un l√≠mite de tiempo para almacenar los ID de los mensajes. La funci√≥n no funciona instant√°neamente, as√≠ que al restablecer los c√≥digos, tenga paciencia "
    "Puede tardar entre dos y tres minutos.\n\n"
    "'Cambiar c√≥digo de administrador': puede cambiar el c√≥digo de administrador en esta ventana manualmente. ¬°No lo pierda! "
    "S√≥lo el desarrollador del bot puede restaurar este c√≥digo.\n\n"
    "Para todas las preguntas que surjan, as√≠ como en caso de recomendaciones para mejorar la funcionalidad o el soporte de texto del bot, "
    "Comun√≠quese con el desarrollador cuyo enlace de perfil est√° publicado en el men√∫ de administraci√≥n principal. ¬°Le deseo buena suerte!"
    ),
    "english": (
        "So, there are 6 buttons in the menu.\n\n"
        "'Exit' -- will send you to the language selection window.\n\n"
        "'Instructions' -- opens the instruction that you are reading now.\n\n"
        "'List of excursions' -- will send you to a window where you will see the already added excursions with their codes on the buttons. By clicking "
    "on the button with the excursion name (if the excursion exists in Russian, its name on the button is automatically displayed in "
    "Russian) you will display the full excursion in all added languages, after which the 'Delete' and 'Edit' buttons will appear. "
    "The 'Delete' button -- after confirmation - will erase the excursion from the database. 'Edit' -- will transfer you to the editor menu. "
    "You will be able to add a new language for the excursion (if not all of Russian, English and Spanish have already been added) or edit the "
    "excursion in the selected language in which the tour already exists. If you select to edit a tour -- you will have access to the full "
    "editor menu for the title, description, and each tour block separately. You will also be able to delete a tour in this language, "
    "as well as add or delete a tour block. Please read the bot's instructions carefully and "
    "use the buttons unless the bot asks otherwise. Typically, a request of this kind contains the word 'Enter'.\n\n"
    "'Add tour' -- This is the function for adding a tour. You will sequentially add the code, language, tour title (in this language), "
    "tour description (in this language), short title for the tour block, audio (if required), photo (if required),"
    "tour block ordinal number (Please, add the block ordinal number very carefully. Always start with one and "
    "when adding each subsequent block, go incrementally by one [1, 2, 3 ...] until you finish adding the tour in this language. "
    "When adding a new tour language, start numbering from the beginning according to the same scheme. Keep the order of the tour blocks consistent between "
    "languages. The ordinal number is not only responsible for sorting the tour blocks within the language, but is also displayed on the buttons for selecting a specific"
    "point for clients) and "
    "block description. Please, be very careful when adding a tour. Carefully read the chat messages about what exactly "
    "he is asking you to add at the moment. If you make a mistake, add the wrong file, or add files out of order "
    "as requested by the bot, you will either have to add it again or go to the tour editor if you added a tour. "
    "Either way, if you did make a mistake and the bot froze, click on the menu to the right of the text input box and click /start.\n\n"
    "'Update tour codes' -- This function will automatically update tour codes and delete all tour files from users. "
    "You can check the new codes in the 'Tour list' window. Recommendation: update the codes after each tour. "
    "The bot has a time limit for storing message IDs. The function does not work instantly, so be patient when resetting the codes."
    "It may take two or three minutes.\n\n"
    "'Change admin code' -- You can change the admin code in this window manually. Don't lose it! "
    "Only the bot developer can restore this code.\n\n"
    "For any questions that arise, as well as in case of recommendations for improving the functionality or text accompaniment of the bot, "
    "contact the developer, the link to whose profile is posted in the main admin menu. Good luck!"
    ),
    "russian": (
        "–ò—Ç–∞–∫, –≤ –º–µ–Ω—é —Å—É—â–µ—Å—Ç–≤—É–µ—Ç 6 –∫–Ω–æ–ø–æ–∫.\n\n"
        "'–í—ã—Ö–æ–¥' -- –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –≤ –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.\n\n"
        "'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' -- –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –≤—ã —á–∏—Ç–∞–µ—Ç–µ —Å–µ–π—á–∞—Å.\n\n"
        "'–°–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π' -- –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—Å –≤ –æ–∫–Ω–æ, –≥–¥–µ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –≤—ã —É–≤–∏–¥–∏—Ç–µ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —Å –∏—Ö –∫–æ–¥–∞–º–∏. –ö–ª–∏–∫–Ω—É–≤ " 
        "–Ω–∞ –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —ç–∫—Å–∫—É—Ä—Å–∏–∏ (–µ—Å–ª–∏ —ç–∫—Å–∫—É—Ä—Å–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—ë –Ω–∞ –∫–Ω–æ–ø–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è "
        "–Ω–∞ —Ä—É—Å—Å–∫–æ–º) –≤—ã  –≤—ã–≤–µ–¥–µ—Ç–µ –ø–æ–ª–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –≤—Å–µ—Ö –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —è–∑—ã–∫–∞—Ö, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ—è–≤—è—Ç—Å—è –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å' –∏ '–ò–∑–º–µ–Ω–∏—Ç—å'. "
        "–∫–Ω–æ–ø–∫–∞ '–£–¥–∞–ª–∏—Ç—å' -- –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - —Å–æ—Ç—Ä—ë—Ç —ç–∫—Å–∫—É—Ä—Å–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. '–ò–∑–º–µ–Ω–∏—Ç—å' -- –ø–µ—Ä–µ–≤–µ–¥—ë—Ç –≤–∞—Å –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞. "
        "–í—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫ –¥–ª—è —ç–∫—Å–∫—É—Ä—Å–∏–∏ (–µ—Å–ª–∏ –Ω–µ –≤—Å–µ –∏–∑ —Ä—É—Å—Å–∫–æ–≥–æ, –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –∏—Å–ø–∞–Ω—Å–∫–æ–≥–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã) –∏–ª–∏ –ø—Ä–∞–≤–∏—Ç—å "
        "—ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç—É—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ï—Å–ª–∏ –≤—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø—Ä–∞–≤–∫—É —ç–∫—Å–∫—É—Ä—Å–∏–∏ -- –≤–∞–º –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –º–µ–Ω—é "
        "–ø–æ–ª–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –Ω–∞–∑–≤–∞–Ω–∏—è, –æ–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –í—ã —Ç–∞–∫–∂–µ —Å–º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ, "
        "–∞ —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è –±–æ—Ç–∞ –∏ "
        "–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –±–æ—Ç –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω–æ–≥–æ. –û–±—ã—á–Ω–æ, –∑–∞–ø—Ä–æ—Å –ø–æ–¥–æ–±–Ω–æ–≥–æ —Ä–æ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ '–í–≤–µ–¥–∏—Ç–µ'.\n\n"
        "'–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä' -- –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–∫—É—Ä—Å–∏–∏. –í—ã –±—É–¥–µ—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–æ–¥, —è–∑—ã–∫, –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ (–Ω–∞ –¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ), "
        "–æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ (–Ω–∞ –¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ), –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –±–ª–æ–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏, –∞—É–¥–∏–æ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è), —Ñ–æ—Ç–æ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è),"
        "–ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏ (–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –±–ª–æ–∫–∞. –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å –µ–¥–∏–Ω–∏—Ü—ã –∏ "
        "–ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–∂–¥–æ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –±–ª–æ–∫–∞ –∏–¥–∏—Ç–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –Ω–∞ –µ–¥–∏–Ω–∏—Ü—É [1, 2, 3 ...], –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç—É—Ä –Ω–∞ –¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ. "
        "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —è–∑—ã–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏, –Ω–∞—á–∏–Ω–∞–π—Ç–µ –Ω—É–º–µ—Ä–æ–≤–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ –ø–æ —Ç–æ–π –∂–µ —Å—Ö–µ–º–µ. –°–æ–±–ª—é–¥–∞–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ—Ä—è–¥–∫–∞ –±–ª–æ–∫–æ–≤ —ç–∫—Å–∫—É—Ä—Å–∏–∏ " 
        "–º–µ–∂–¥—É —è–∑—ã–∫–∞–º–∏. –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –±–ª–æ–∫–æ–≤ —ç–∫—Å–∫—É—Ä—Å–∏–∏ –≤–Ω—É—Ç—Ä–∏ —è–∑—ã–∫–∞, –Ω–æ –∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π"
        " —Ç–æ—á–∫–∏ —É –∫–ª–∏–µ–Ω—Ç–æ–≤) –∏ "
        "–æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—É–¥—å—Ç–µ –æ—á–µ–Ω—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –∫–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç–µ —ç–∫—Å–∫—É—Ä—Å–∏—é. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –æ —Ç–æ–º, —á—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ "
        "–≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–Ω –ø—Ä–æ—Å–∏—Ç –≤–∞—Å –¥–æ–±–∞–≤–∏—Ç—å. –ï—Å–ª–∏ –≤—ã –¥–æ–ø—É—Å—Ç–∏—Ç–µ –æ—à–∏–±–∫—É, –¥–æ–±–∞–≤–∏—Ç–µ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç–µ —Ñ–∞–π–ª—ã –Ω–µ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, "
        "–≤ –∫–æ—Ç–æ—Ä–æ–º –∏—Ö –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±–æ—Ç, –≤–∞–º –ª–∏–±–æ –ø—Ä–∏–¥—ë—Ç—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –µ—ë –∑–∞–Ω–æ–≤–æ, –ª–∏–±–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä —ç–∫—Å–∫—É—Ä—Å–∏–π, –µ—Å–ª–∏ –≤—ã –¥–æ–±–∞–≤–∏–ª–∏ —Ç—É—Ä. "
        "–¢–∞–∫ –∏–ª–∏ –∏–Ω–∞—á–µ, –µ—Å–ª–∏ –≤—ã –≤—Å—ë-—Ç–∞–∫–∏ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –æ—à–∏–±–∫—É –∏ –±–æ—Ç –∑–∞–≤–∏—Å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–µ–Ω—é —Å–ø—Ä–∞–≤–∞ –æ—Ç –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞, –∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ /start.\n\n"
        "'–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥—ã —ç–∫—Å–∫—É—Ä—Å–∏–π' -- –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏—Ç –∫–æ–¥—ã —ç–∫—Å–∫—É—Ä—Å–∏–π –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —ç–∫—Å–∫—É—Ä—Å–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
        "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∫–æ–¥—ã –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤ –æ–∫–Ω–µ '–°–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏'. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∫–æ–¥—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏. "
        "–£ –±–æ—Ç–∞ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π. –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, —Ç–∞–∫ —á—Ç–æ —Ä–µ—Å–µ—Ç—è –∫–æ–¥—ã, –∑–∞–ø–∞—Å–∏—Ç–µ—Å—å —Ç–µ—Ä–ø–µ–Ω–∏–µ–º."
        "–û–Ω–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–≤–µ-—Ç—Ä–∏ –º–∏–Ω—É—Ç—ã.\n\n"
        "'–°–º–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–¥–∞' -- –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–¥ –≤ —ç—Ç–æ–º –æ–∫–Ω–µ –≤—Ä—É—á–Ω—É—é. –ù–µ –ø–æ—Ç–µ—Ä—è–π—Ç–µ –µ–≥–æ! "
        "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –∫–æ–¥ —Å–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞.\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–∑–Ω–∏–∫—à–∏–º –≤–æ–ø—Ä–æ—Å–∞–º, –∞ —Ç–∞–∫–∂–µ –≤ —Å–ª—É—á–∞–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞, "
        "–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–ª–æ–∂–µ–Ω–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –∞–¥–º–∏–Ω—Å–∫–æ–º –º–µ–Ω—é. –ñ–µ–ª–∞—é —É–¥–∞—á–∏!"
    )
}
    
    bot.send_message(
        message.chat.id,
        text=instructions_text.get(lang, instructions_text["english"]),
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞ –∏–ª–∏ –≤–≤–æ–¥–∞ –∫–æ–¥–∞
@bot.message_handler(content_types=['text'], func=lambda message: user_state.get(message.chat.id) in (NOACT, START))
def handle_return_to_language_selection(message):
    global user_state
    if message.text in ("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞", "Return to language selection", "Volver a la selecci√≥n de idioma", "–í—ã—Ö–æ–¥", 
                        "Exit", "Salida", "Volver al men√∫ principal", "Return to main menu", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        start(message)
    
    elif message.text in ["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "Instruction", "Instruccion"]:
        instruction(message)

    elif message.text in ["Volver a la ventana de control", "Return to the control window", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"]:
        admin_pannel(message)   

    elif message.text in all_excursions[message.chat.id]:
        add_message_id(message.chat.id, message.message_id)
        main_excursion(message)

    elif message.text == adm_code:
        main_admin(message)

    elif message.text in ("Return to entering code", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤–≤–µ–¥–µ–Ω–∏—é –∫–æ–¥–∞", "Volver a la entrada de c√≥digo"):
        enter_code(message)

    elif code_entering[message.chat.id] == 1:
        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω
        if language[message.chat.id] == "spanish":
            bot.send_message(message.chat.id, text="Lo sentimos, pero el c√≥digo es incorrecto. Si no lo conoces, pregunta al Gu√≠a.")
        elif language[message.chat.id] == "english":
            bot.send_message(message.chat.id, text="Sorry, but the code is incorrect. If you don't know it, ask the Guide.")
        elif language[message.chat.id] == "russian":
            bot.send_message(message.chat.id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∫–æ–¥ –Ω–µ–≤–µ—Ä–µ–Ω. –ï—Å–ª–∏ –æ–Ω –≤–∞–º –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, —Å–ø—Ä–æ—Å–∏—Ç–µ —É –≥–∏–¥–∞!")
        enter_code_repeat(message)

    elif message.text in ("Ir al recorrido", "Go to the tour", "–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏", "Volver al men√∫ del recorrido", "Return to the tour menu", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —ç–∫—Å–∫—É—Ä—Å–∏–∏"):
        add_message_id(message.chat.id, message.message_id)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            pref = "Descripci√≥n del tour"
            nmess0 = bot.send_message(message.chat.id, text = f"{pref}:\n{all_excursions[message.chat.id].get('description')}")
            add_message_id(message.chat.id, nmess0.message_id)
            button1 = types.KeyboardButton("Iniciar el recorrido desde el principio")
            button2 = types.KeyboardButton("Seleccionar un punto espec√≠fico")
            button3 = types.KeyboardButton("Volver al men√∫ principal")
            markup.row(button1)
            markup.row(button2)
            markup.row(button3)
            nmess = bot.send_message(message.chat.id, text="Si deseas comenzar nuestro recorrido desde el principio, haz clic en el bot√≥n 'Iniciar el recorrido desde el principio'. Si ya est√°s en un punto determinado (por ejemplo, en el monumento a Evita Per√≥n), haz clic en el bot√≥n 'Seleccionar un punto espec√≠fico'", reply_markup=markup)
        elif language[message.chat.id] == "english":
            pref = "Tour description"
            nmess0 = bot.send_message(message.chat.id, text = f"{pref}:\n{all_excursions[message.chat.id].get('description')}")
            add_message_id(message.chat.id, nmess0.message_id)
            button1 = types.KeyboardButton("Start the tour from the beginning")
            button2 = types.KeyboardButton("Select a specific point")
            button3 = types.KeyboardButton("Return to main menu")
            markup.row(button1)
            markup.row(button2)
            markup.row(button3)
            nmess = bot.send_message(message.chat.id, text="If you want to start our tour from the beginning, click on the button 'Start the tour from the beginning'. If you are already at a certain point (for example, at the Evita Peron monument), click on the button 'Select a specific point'", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            pref = "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–∞"
            nmess0 = bot.send_message(message.chat.id, text = f"{pref}:\n{all_excursions[message.chat.id].get('description')}")
            add_message_id(message.chat.id, nmess0.message_id)
            button1 = types.KeyboardButton("–ù–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é —Å–Ω–∞—á–∞–ª–∞")
            button2 = types.KeyboardButton("–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—á–∫—É")
            button3 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            markup.row(button1)
            markup.row(button2)
            markup.row(button3)
            nmess = bot.send_message(message.chat.id, text="–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å–Ω–∞—á–∞–ª–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ù–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é —Å–Ω–∞—á–∞–ª–∞¬ª. –ï—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —É–∂–µ –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π —Ç–æ—á–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É –ø–∞–º—è—Ç–Ω–∏–∫–∞ –≠–≤–∏—Ç—ã –ü–µ—Ä–æ–Ω), –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—á–∫—É¬ª", reply_markup=markup)
        add_message_id(message.chat.id, nmess.message_id)

    elif message.text in ("Iniciar el recorrido desde el principio", "Start the tour from the beginning", "–ù–∞—á–∞—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é —Å–Ω–∞—á–∞–ª–∞"):
        add_message_id(message.chat.id, message.message_id)
        full_tour(message)

    elif message.text in ("Seleccionar un punto espec√≠fico", "Select a specific point", "–í—ã–±—Ä–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–æ—á–∫—É"):
        add_message_id(message.chat.id, message.message_id)
        partial_tour(message)

    elif message.text in ("Lista de excursiones", "List of tours", "–°–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π"):
        view_blocks(message)   

    elif message.text in ("Agregar un recorrido", "Add a tour", "–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä"):
        if language[message.chat.id] == "spanish":
            bot.send_message(message.chat.id, text="Introduce el c√≥digo para una nueva excursi√≥n: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(message.chat.id, text="Enter the code for a new tour: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –Ω–æ–≤–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏: ", reply_markup=types.ReplyKeyboardRemove())	
        user_state[message.chat.id] = ADD_BLOCK_CODE

    elif message.text in ("Cambiar el c√≥digo de administrador", "Edit the admin code", "–°–º–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–¥–∞"):
        admin_code_setup(message)
    elif message.text in ("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥—ã —ç–∫—Å–∫—É—Ä—Å–∏–π", "Update tour codes", "Actualizar c√≥digos de tour"):
        tour_codes(message)

def tour_codes(message):
    if language[message.chat.id] == "spanish":
        b1 = "Continuar"
        b2 = "Volver"
        text = "¬øEst√° seguro de que desea cambiar todos los c√≥digos de viaje existentes?"
    elif language[message.chat.id] == "english":
        b1 = "Continue"
        b2 = "Back"
        text = "Are you sure you want to change all codes for existing tours?"
    elif language[message.chat.id] == "russian":
        b1 = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        b2 = "–ù–∞–∑–∞–¥"
        text = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ –∫–æ–¥—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—É—Ä–æ–≤?"
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton(b1)
    button2 = types.KeyboardButton(b2)
    markup.row(button1, button2)
    bot.send_message(message.chat.id, text=text, reply_markup=markup)
    user_state[message.chat.id] = TOUR_CODE

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == TOUR_CODE)
def tour_code_new(message):
    global user_state
    if message.text in ["Volver", "Back", "–ù–∞–∑–∞–¥"]:
        user_state[message.chat.id] = START
        admin_pannel(message)
        return
    if language[message.chat.id] == "spanish":
        text2 = "Se ha iniciado el proceso de actualizaci√≥n de c√≥digos y eliminaci√≥n de mensajes relacionados con excursiones de los chats de los usuarios. Esto puede tardar unos minutos. Espere la notificaci√≥n de que todos los c√≥digos se han actualizado y no realice ninguna acci√≥n en el bot."
        text = "¬°Todos los c√≥digos se actualizaron correctamente y se borraron los historiales de chat de los usuarios!"
    elif language[message.chat.id] == "english":
        text2 = "The process of updating codes and deleting messages related to excursions from user chats has started. This may take several minutes. Please wait for the notification that all codes have been updated and do not perform any actions in the bot."
        text = "All codes have been successfully updated and user's chat histories have been cleared!"
    elif language[message.chat.id] == "russian":
        text2 = "–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤ –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —á–∞—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, —á—Ç–æ –≤—Å–µ –∫–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ –Ω–µ —Å–æ–≤–µ—Ä—à–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–π –≤ –±–æ—Ç–µ."
        text = "–í—Å–µ –∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã, –∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω—ã!"

    bot.send_message(message.chat.id, text=text2, reply_markup=types.ReplyKeyboardRemove())
    reset_all_codes()
    delete_messages()
    clear_message_ids_file()
    bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
    user_state[message.chat.id] = START
    admin_pannel(message)

def admin_code_setup(message):
    global adm_code, user_state
    if language[message.chat.id] == "spanish":
        bot.send_message(message.chat.id, text=f"El c√≥digo de administrador actual es: {adm_code}")
        b1 = "Continuar"
        b2 = "Volver"
        text = "¬øEst√°s seguro de que deseas cambiar el c√≥digo de administrador?"
    elif language[message.chat.id] == "english":
        bot.send_message(message.chat.id, text=f"Current admin code is: {adm_code}")
        b1 = "Continue"
        b2 = "Back"
        text = "Are you sure that you want to change the admin code?"
    elif language[message.chat.id] == "russian":
        bot.send_message(message.chat.id, text=f"–¢–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–¥: {adm_code}")
        b1 = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
        b2 = "–ù–∞–∑–∞–¥"
        text = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–¥?"

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton(b1)
    button2 = types.KeyboardButton(b2)
    markup.row(button1, button2)
    bot.send_message(message.chat.id, text=text, reply_markup=markup)
    user_state[message.chat.id] = ADDMIN_CODE

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == ADDMIN_CODE)
def admin_code_new(message):
    global adm_code, user_state, code_entering
    if message.text in ["Volver", "Back", "–ù–∞–∑–∞–¥"]:
        user_state[message.chat.id] = START
        admin_pannel(message)
        return
    code_entering[message.chat.id] = 1
    if language[message.chat.id] == "spanish":
        text = "Introduzca el nuevo c√≥digo de administrador. Se recomienda utilizar solo d√≠gitos y que el c√≥digo tenga una longitud de 6 d√≠gitos."
    elif language[message.chat.id] == "english":
        text = "Enter new admin code. It is recommended to use digits only and code length is 6"
    elif language[message.chat.id] == "russian":
        text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –¥–ª–∏–Ω–∞ –∫–æ–¥–∞ ‚Äî 6"
    bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
    user_state[message.chat.id] = ADDMIN_CODE_SAVE

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == ADDMIN_CODE_SAVE)
def admin_code_save(message):
    global adm_code, user_state, code_entering
    code_entering[message.chat.id] = 0
    new_code = message.text
    if 6 <= len(new_code.strip()) <= 10:
        adm_code = new_code.strip()
        save_admin_code(adm_code) 
        if language[message.chat.id] == "spanish":
            bot.send_message(message.chat.id, text="¬°El c√≥digo de administrador se ha cambiado correctamente!")
        elif language[message.chat.id] == "english":
            bot.send_message(message.chat.id, text="Admin code has been successfully changed!")
        elif language[message.chat.id] == "russian":
            bot.send_message(message.chat.id, text="–ê–¥–º–∏–Ω—Å–∫–∏–π –∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        user_state[message.chat.id] = START
        admin_pannel(message)
    else:
        if language[message.chat.id] == "spanish":
            bot.send_message(message.chat.id, text="Elija un formato de c√≥digo diferente. La longitud no debe ser superior a 10 ni inferior a 6.")
        elif language[message.chat.id] == "english":
            bot.send_message(message.chat.id, text="Please choose another code format. The length must be no more than 10 and no less than 6.")
        elif language[message.chat.id] == "russian":
            bot.send_message(message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞. –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ 10 –∏ –Ω–µ –º–µ–Ω—å—à–µ 6.")
        user_state[message.chat.id] = ADDMIN_CODE
        admin_code_new(message)

#--------------------ADD NEW TOUR-------------------------------
@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == ADD_BLOCK_CODE)
def add_block_code(message):
    global user_data, user_state
    if message.text in all_excursions[message.chat.id]:
        if language[message.chat.id] == "spanish":
            bot.send_message(message.chat.id, text="Me temo que ya existe un recorrido con este c√≥digo.")
        elif language[message.chat.id] == "english":
            bot.send_message(message.chat.id, text="I'm afraid a tour with this code already exists.")
        elif language[message.chat.id] == "russian":
            bot.send_message(message.chat.id, text="–ë–æ—é—Å—å, —Ç—É—Ä —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        user_state[message.chat.id] = START
        admin_pannel(message)
        return
    user_data = getattr(bot, 'user_data', {})
    user_data[message.chat.id] = {'block_code': message.text, 'languages': {}}

    bot.user_data = user_data
    choose_language(message)

def choose_language(message):
    global user_state
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    if language[message.chat.id] == "spanish":
        markup.row("Ruso", "Ingl√©s", "Espa√±ol")
        markup.row("Terminar de agregar")
        bot.send_message(message.chat.id, text="Seleccionar idioma de audio y descripci√≥n: ", reply_markup=markup)
    elif language[message.chat.id] == "english":
        markup.row("Russian", "English", "Spanish")
        markup.row("Finish adding")
        bot.send_message(message.chat.id, text="Select audio and description language: ", reply_markup=markup)
    elif language[message.chat.id] == "russian":
        markup.row("–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–ò—Å–ø–∞–Ω—Å–∫–∏–π")
        markup.row("–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ")
        bot.send_message(message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∞—É–¥–∏–æ –∏ –æ–ø–∏—Å–∞–Ω–∏—è: ", reply_markup=markup)
    user_state[message.chat.id] = CHOOSE_LANGUAGE

@bot.message_handler(func=
lambda message: user_state.get(message.chat.id) == CHOOSE_LANGUAGE)
def handle_language_choice(message):

    global user_data, user_state
    user_id = message.chat.id
    if message.text in ["Terminar de agregar", "Finish adding", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ"]:
        save_block(message)
        return
    lang_map = {"Ruso": "Russian", "Ingl√©s": "English", "Espa√±ol": "Spanish", "Russian": "Russian",
                "English": "English", "Spanish": "Spanish", "–†—É—Å—Å–∫–∏–π": "Russian", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "English", "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "Spanish"}
    if message.text in lang_map:
        selected_lang = lang_map[message.text]
        if user_id not in user_data:
            user_data[user_id] = {'block_code': '', 'languages': {}}
        user_data[user_id]['current_language'] = selected_lang
        if 'languages' not in user_data[user_id]:
            user_data[user_id]['languages'] = {}
        if selected_lang not in user_data[user_id]['languages']:
            user_data[user_id]['languages'][selected_lang] = {'name': '', 'description' : '', 'points': {}}
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Introduce el nombre de la excursi√≥n: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Enter the name of the excursion: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = ADD_BLOCK_NAME
    else:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Seleccione un idioma de las opciones proporcionadas.")
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Please select a language from the options provided.")
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == ADD_BLOCK_NAME)
def add_block_name(message):
    global user_data, user_state
    user_id = message.chat.id
    user_data[user_id]['languages'][user_data[user_id]['current_language']]['name'] = message.text
    if language[message.chat.id] == "spanish":
        bot.send_message(user_id, text="Por favor introduzca una descripci√≥n de la excursi√≥n. Se mostrar√° al cliente en el men√∫ de excursiones.")
    elif language[message.chat.id] == "english":
        bot.send_message(user_id, text="Please enter a description of the excursion. It will be displayed to the client in the excursion menu.")
    elif language[message.chat.id] == "russian":
        bot.send_message(user_id, text="–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –û–Ω–æ –±—É–¥–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç—É –≤ –º–µ–Ω—é —ç–∫—Å–∫—É—Ä—Å–∏–∏.")
    user_state[user_id] = ADD_DESCRIPTION_MAIN

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == ADD_DESCRIPTION_MAIN)
def add_description_main(message):
    global user_data, user_state
    user_id = message.chat.id
    user_data[user_id]['languages'][user_data[user_id]['current_language']]['description'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language[message.chat.id] == "spanish":
        button1 = types.KeyboardButton("Si")
        button2 = types.KeyboardButton("No")
        markup.row(button1, button2)
        bot.send_message(user_id, text="¬øPrefieres el audio?", reply_markup=markup)
    elif language[message.chat.id] == "english":
        button1 = types.KeyboardButton("Yes")
        button2 = types.KeyboardButton("No")
        markup.row(button1, button2)
        bot.send_message(user_id, text="Do we add audio tape?", reply_markup=markup)
    elif language[message.chat.id] == "russian":
        button1 = types.KeyboardButton("–î–∞")
        button2 = types.KeyboardButton("–ù–µ—Ç")
        markup.row(button1, button2)
        bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª?", reply_markup=markup)
    user_state[user_id] = CONF_AUDIO

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == CONF_AUDIO)
def check_audio_addition(message):
    global user_data, user_state
    user_id = message.chat.id
    if message.text in ["–î–∞", "Yes", "Si"]:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Enviar un archivo de audio: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Send an audio file: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = ADD_AUDIO
    elif message.text in ["–ù–µ—Ç", "No"]:
        user_data[user_id]['current_audio_url'] = "No file"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="¬øPrefieres foto?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="Do we add photo?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ?", reply_markup=markup)
        user_state[user_id] = CONF_PHOTO

@bot.message_handler(content_types=['audio'], func=lambda message: user_state.get(message.chat.id) == ADD_AUDIO)
def add_audio(message):
    global user_data, user_state
    user_id = message.chat.id
    if user_id not in user_data:
        user_data[user_id] = {}
    try:
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        if 'block_code' not in user_data[user_id] or 'current_language' not in user_data[user_id]:
            raise ValueError("Missing block_code or current_language")
        file_name = f"{user_data[user_id]['block_code']}_{user_data[user_id]['current_language']}_{len(user_data[user_id]['languages'][user_data[user_id]['current_language']]['points'])}.mp3"
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Firebase Storage
        blob = bucket.blob(file_name)
        blob.upload_from_string(downloaded_file, content_type='audio/mpeg')
        blob.make_public()
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞
        audio_url = blob.public_url
        user_data[user_id]['current_audio_url'] = audio_url
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="¬øPrefieres foto?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="Do we add photo?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ?", reply_markup=markup)
        user_state[user_id] = CONF_PHOTO
    except Exception as e:
        bot.send_message(user_id, f"Error al procesar el archivo de audio: {str(e)}")
        logger.error(f"Error processing audio file: {str(e)}")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == CONF_PHOTO)
def check_photo_addition(message):
    global user_data, user_state
    user_id = message.chat.id
    if message.text in ["–î–∞", "Yes", "Si"]:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Enviar una foto: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Send photo: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = ADD_PHOTO
    elif message.text in ["–ù–µ—Ç", "No"]:
        user_data[user_id]['current_photo_url'] = "No file"
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Agregue un nombre corto para el block de tour. Este es el nombre que el cliente ver√° en el bot√≥n: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Add a short name for this excursion block. This name will be seen by the client on the button: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = SHORT_NAME

@bot.message_handler(content_types=['photo'], func=lambda message: user_state.get(message.chat.id) == ADD_PHOTO)
def add_photo(message):
    global user_data, user_state
    user_id = message.chat.id
    if user_id not in user_data:
        user_data[user_id] = {}
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        if 'block_code' not in user_data[user_id] or 'current_language' not in user_data[user_id]:
            raise ValueError("Missing block_code or current_language")
        file_name = f"{user_data[user_id]['block_code']}_{user_data[user_id]['current_language']}_{len(user_data[user_id]['languages'][user_data[user_id]['current_language']]['points'])}_photo.jpg"
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Firebase Storage
        blob = bucket.blob(file_name)
        blob.upload_from_string(downloaded_file, content_type='image/jpeg')
        blob.make_public()
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞
        photo_url = blob.public_url
        user_data[user_id]['current_photo_url'] = photo_url
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Foto recibida. Agregue un nombre corto para el block de tour. Este es el nombre que el cliente ver√° en el bot√≥n: ")
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Photo received. Add a short name for this excursion block. This name will be seen by the client on the button: ")
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ: ")
        user_state[user_id] = SHORT_NAME
    except Exception as e:
        bot.send_message(user_id, f"Error al procesar el archivo de photo: {str(e)}")
        logger.error(f"Error processing photo file: {str(e)}")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == SHORT_NAME)
def add_short_name(message):
    global user_data, user_state
    user_id = message.chat.id
    short_name = message.text
    user_data[user_id]['current_short_name'] = short_name
    if language[message.chat.id] == "spanish":
        bot.send_message(user_id, "Nombre corto recibido. Ahora agregue el n√∫mero de secuencia:")
    elif language[message.chat.id] == "english":
        bot.send_message(user_id, "Short name received. Now add the serial number:")
    elif language[message.chat.id] == "russian":
        bot.send_message(user_id, "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: ")
    user_state[user_id] = ADD_ORDER

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == ADD_ORDER)
def add_order(message):
    global user_data, user_state
    user_id = message.chat.id
    order = message.text
    user_data[user_id]['order'] = int(order)
    if language[message.chat.id] == "spanish":
        bot.send_message(user_id, "Nombre corto recibido. Ahora agrega una descripci√≥n")
    elif language[message.chat.id] == "english":
        bot.send_message(user_id, "Short name received. Now add a description")
    elif language[message.chat.id] == "russian":
        bot.send_message(user_id, "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ")
    user_state[user_id] = ADD_DESCRIPTION

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == ADD_DESCRIPTION)
def add_description(message):
    global user_data, user_state
    user_id = message.chat.id
    description = message.text
    current_lang = user_data[user_id]['current_language']
    short_name = user_data[user_id]['current_short_name']
    order = user_data[user_id]['order']
    user_data[user_id]['languages'][current_lang]['points'][short_name] = {
        'audio': user_data[user_id]['current_audio_url'],
        'photo': user_data[user_id]['current_photo_url'],
        'description': description,
        'order' : order
    }
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language[message.chat.id] == "spanish":
        markup.row('Agregar block', 'Seleccionar otro idioma', 'Terminar de agregar')
        bot.send_message(user_id, "Este parte a√±adido. ¬øQu√© sigue?", reply_markup=markup)
    elif language[message.chat.id] == "english":
        markup.row('Add block', 'Select another language', 'Finish adding')
        bot.send_message(user_id, "Block added. What's next?", reply_markup=markup)
    elif language[message.chat.id] == "russian":
        markup.row('–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫', '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫', '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ')
        bot.send_message(user_id, "–ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
    user_state[user_id] = CONFIRM_AUDIO

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == CONFIRM_AUDIO)
def confirm_audio(message):
    global user_state
    user_id = message.chat.id
    if message.text in ['–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫', 'Add block', 'Agregar block']:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="¬øPrefieres el audio?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="Do we add audio tape?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª?", reply_markup=markup)
        user_state[user_id] = CONF_AUDIO
    elif message.text in ['–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —è–∑—ã–∫', 'Select another language', 'Seleccionar otro idioma']:
        choose_language(message)
    elif message.text in ['–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', 'Finish adding', 'Terminar de agregar']:
        save_block(message)

def save_block(message):
    global user_data, user_state
    user_data = getattr(bot, 'user_data', {}).get(message.chat.id, {})
    block_code = user_data['block_code']
    languages = user_data['languages']
   
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Firebase Realtime Database
    block_ref = database.child('blocks').child(block_code)
    block_ref.set(languages)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language[message.chat.id] == "spanish":
        b1 = types.KeyboardButton("Lista de excursiones")
        b2 = types.KeyboardButton("Agregar un recorrido")
        b3 = types.KeyboardButton("Actualizar c√≥digos de tour")
        b4 = types.KeyboardButton("Cambiar el c√≥digo de administrador")
        b5 = types.KeyboardButton("Instruccion")
        b6 = types.KeyboardButton("Salida")
        markup.row(b1, b2)
        markup.row(b3, b4)
        markup.row(b5)
        markup.row(b6)
        bot.send_message(
            message.chat.id,
            text="¬°Bloque guardado exitosamente!\n"
                 "Esta es la ventana de gesti√≥n de excursiones. Para obtener m√°s informaci√≥n sobre las capacidades del administrador, puede hacer clic en el bot√≥n 'Instrucciones'\n"
                 "Si tienes alguna otra pregunta, escribe al desarrollador https://t.me/The_lord_of_the_dawn",
            reply_markup=markup
        )
    elif language[message.chat.id] == "english":
        b1 = types.KeyboardButton("List of tours")
        b2 = types.KeyboardButton("Add a tour")
        b3 = types.KeyboardButton("Update tour codes")
        b4 = types.KeyboardButton("Edit the admin code")
        b5 = types.KeyboardButton("Instruction")
        b6 = types.KeyboardButton("Exit")
        markup.row(b1, b2)
        markup.row(b3, b4)
        markup.row(b5)
        markup.row(b6)
        bot.send_message(
            message.chat.id,
            text="Block saved successfully!\n"
                 "This is the excursion management window. To learn more about the admin's capabilities, you can click on the 'Instructions' button\n"
                 "If you have any other questions, write to the developer https://t.me/The_lord_of_the_dawn",
            reply_markup=markup
        )
    elif language[message.chat.id] == "russian":
        b1 = types.KeyboardButton("–°–ø–∏—Å–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–π")
        b2 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç—É—Ä")
        b3 = types.KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥—ã —ç–∫—Å–∫—É—Ä—Å–∏–π")
        b4 = types.KeyboardButton("–°–º–µ–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –∫–æ–¥–∞")
        b5 = types.KeyboardButton("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
        b6 = types.KeyboardButton("–í—ã—Ö–æ–¥")
        markup.row(b1, b2)
        markup.row(b3, b4)
        markup.row(b5)
        markup.row(b6)
        bot.send_message(
            message.chat.id,
            text="–ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                 "–≠—Ç–æ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∞–¥–º–∏–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'\n"
                 "–ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É https://t.me/The_lord_of_the_dawn",
            reply_markup=markup
        )
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    user_state[message.chat.id] = START
    bot.user_data = getattr(bot, 'user_data', {})
    bot.user_data[message.chat.id] = {}

def view_blocks(message):
    global user_state, block_name
    blocks = database.child('blocks').get()
    block_name[message.chat.id] = ""
    if not blocks:
        if language[message.chat.id] == "spanish":
            bot.send_message(message.chat.id, "A√∫n no hay bloques.")
        elif language[message.chat.id] == "english":
            bot.send_message(message.chat.id, "There are no blocks yet.")
        elif language[message.chat.id] == "russian":
            bot.send_message(message.chat.id, "–ë–ª–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for block_code in blocks:
        if 'Russian' in blocks[block_code]:
            ex_name = blocks[block_code]['Russian']['name']
        elif 'English' in blocks[block_code]:
            ex_name = blocks[block_code]['English']['name']
        elif 'Spanish' in blocks[block_code]:
            ex_name = blocks[block_code]['Spanish']['name']
        markup.add(f"{ex_name} (Code: {block_code})")

    if language[message.chat.id] == "spanish":
        markup.add('Atr√°s')
        bot.send_message(message.chat.id, 'Todas las excursiones agregadas se presentan aqu√≠. Pulsa sobre el nombre de la excursi√≥n para visualizarla, as√≠ como eliminarla o cambiarla.', reply_markup=markup)
    elif language[message.chat.id] == "english":
        markup.add('Back')
        bot.send_message(message.chat.id, 'All added excursions are presented here. Click on the excursion name to display it, as well as delete or change it.', reply_markup=markup)
    elif language[message.chat.id] == "russian":
        markup.add('–ù–∞–∑–∞–¥')
        bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏, —á—Ç–æ–±—ã –≤—ã–≤–µ—Å—Ç–µ –µ—ë, –∞ —Ç–∞–∫ –∂–µ —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å.', reply_markup=markup)
    user_state[message.chat.id] = 'VIEW_BLOCKS'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'VIEW_BLOCKS')
def handle_block_selection(message):
    global block_name, user_state
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        admin_pannel(message)
        return
    trt = message.text
    mess = trt.split(" (Code:")[0]
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if language[message.chat.id] == "spanish":
        block = "Recorrido"
        text = "Seleccionar acci√≥n:"
        chg = "Cambiar"
        dlt = "Eliminar"
        bck = "Atr√°s"
        ord_ex = "Orden"
        shrt_ex = "Nombre corto"
        lang_ex = "Idioma"
        name_ex = "Nombre"
        code_ex = "C√≥digo"
        descr_ex = "Descripci√≥n"
    elif language[message.chat.id] == "english":
        block = "Tour"
        text = "Select action:"
        chg = "Edit"
        dlt = "Delete"
        bck = "Back"
        ord_ex = "Order"
        shrt_ex = "Short name"
        lang_ex = "Language"
        name_ex = "Name"
        code_ex = "Code"
        descr_ex = "Description"
    elif language[message.chat.id] == "russian":
        block = "–¢—É—Ä"
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        chg = "–ò–∑–º–µ–Ω–∏—Ç—å"
        dlt = "–£–¥–∞–ª–∏—Ç—å"
        bck = "–ù–∞–∑–∞–¥"
        ord_ex = "–ü–æ—Ä—è–¥–æ–∫"
        shrt_ex = "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è"
        lang_ex = "–Ø–∑—ã–∫"
        name_ex = "–ù–∞–∑–≤–∞–Ω–∏–µ"
        code_ex = "–ö–æ–¥"
        descr_ex = "–û–ø–∏—Å–∞–Ω–∏–µ"
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    languages = ['Russian', 'English', 'Spanish']
    blocks = database.child('blocks').get()
    block_name[message.chat.id] = mess
    # –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    code = None
    for block_code, block_data in blocks.items():
        for lang in languages:
            if lang in block_data and block_data[lang].get('name') == mess:
                code = block_code
                break

    if not code:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω
        not_found_message = {
            "spanish": "Bloque no encontrado.",
            "english": "Block not found.",
            "russian": "–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        }
        bot.send_message(message.chat.id, not_found_message.get(language[message.chat.id], "Block not found"))
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ –∫–æ–¥—É
    block_data = database.child('blocks').child(code).get()
    
    if block_data:
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —è–∑—ã–∫–æ–≤–æ–º—É —Ä–∞–∑–¥–µ–ª—É
        for lang, content in block_data.items():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —è–∑—ã–∫–æ–º, –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∫–æ–¥–æ–º –±–ª–æ–∫–∞
            bot.send_message(message.chat.id, f"{lang_ex}: {lang}, \n{name_ex}: {content.get('name')}, \n{code_ex}: {code}, \n{descr_ex}: {content.get('description')}")

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            points = content.get('points', {})
            points = dict(sorted(
                points.items(),
                key=lambda item: item[1]['order']
                )
            )
            for point_name, details in points.items():
                description = details.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                photo_url = details.get('photo')
                audio_url = details.get('audio')
                order = details.get('order')
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if photo_url:
                    if photo_url == "No file":
                        bot.send_message(message.chat.id, text=f"{ord_ex}: {order}\n{shrt_ex}: {point_name}\n{descr_ex}: {description}")
                    else:
                        try:
                            response = requests.get(photo_url)
                            if response.status_code == 200:
                                bot.send_photo(message.chat.id, photo_url, caption=f"{ord_ex}: {order}\n{shrt_ex}: {point_name}\n{descr_ex}: {description}")
                            else:
                                bot.send_message(message.chat.id, "–§–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.")
                        except requests.exceptions.RequestException:
                            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
                if audio_url:
                    if audio_url != "No file":
                        try:
                            response = requests.get(audio_url)
                            if response.status_code == 200:
                                bot.send_audio(message.chat.id, audio_url)
                            else:
                                bot.send_message(message.chat.id, "–ê—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.")
                        except requests.exceptions.RequestException:
                            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ.")
                bot.send_message(message.chat.id, "----------------------")
                    
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(chg, dlt)
        markup.row(bck)
        bot.send_message(message.chat.id, text=text, reply_markup=markup)
        user_state[message.chat.id] = 'BLOCK_ACTION'
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–ª–æ–∫–∞
        not_found_message = {
            "spanish": "Bloque no encontrado.",
            "english": "Block not found.",
            "russian": "–ë–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
        }
        bot.send_message(message.chat.id, not_found_message.get(language[message.chat.id], "Block not found"))

@bot.message_handler(func=lambda message: user_state[message.chat.id] == 'BLOCK_ACTION')
def handle_block_action(message):
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        view_blocks(message)
        return
    global user_state
    if language[message.chat.id] == "spanish":
        y = "S√≠"
        add_lang = "Agregar idioma del recorrido"
        mod_lang = "Seleccione el idioma del recorrido para editar"
        bck = "Atr√°s"
        text_del = "¬øEst√°s seguro de que deseas eliminar este recorrido por completo? La acci√≥n no se puede deshacer."
        text_ed = "Esta es la ventana de ediciones. Aqu√≠ puede agregar un nuevo idioma para el recorrido o seleccionar el idioma existente del recorrido actual en el que el recorrido requiere edici√≥n."
    elif language[message.chat.id] == "english":
        y = "Yes"
        add_lang = "Add tour language"
        mod_lang = "Select the tour language for editing"
        bck = "Back"
        text_del = "Are you sure you want to delete this tour completely? The action cannot be undone."
        text_ed = "This is the edit window. Here you can add a new tour language, or select an existing tour language, in which the tour requires editing."
    elif language[message.chat.id] == "russian":
        y = "–î–∞"
        add_lang = "–î–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫ —Ç—É—Ä–∞"
        mod_lang = "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ —Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∫–∏"
        bck = "–ù–∞–∑–∞–¥"
        text_del = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç—É—Ä? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å."
        text_ed = "–≠—Ç–æ –æ–∫–Ω–æ –ø—Ä–∞–≤–æ–∫. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏, –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —è–∑—ã–∫ —Ç–µ–∫—É—â–∏–π —ç–∫—Å–∫—É—Ä—Å–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ç—É—Ä —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∫–∏."

    if message.text in ["–£–¥–∞–ª–∏—Ç—å", "Delete", "Eliminar"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(y, bck)
        bot.send_message(message.chat.id, text_del, reply_markup=markup)
        user_state[message.chat.id] = 'BLOCK_REMOVE'
    elif message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å", "Edit", "Cambiar"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.row(add_lang)
        markup.row(mod_lang)
        markup.row(bck)
        bot.send_message(message.chat.id, text_ed, reply_markup=markup)
        user_state[message.chat.id] = 'BLOCK_EDIT'

@bot.message_handler(func=lambda message: user_state[message.chat.id] == 'BLOCK_REMOVE')
def handle_block_action(message):
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        view_blocks(message)
        return
    
    global block_name, user_state
    if language[message.chat.id] == "spanish":
        block = "Recorrido"
        bck = "Atr√°s"
        text1 = "fue eliminado exitosamente de la base de datos."
    elif language[message.chat.id] == "english":
        block = "Tour"
        bck = "Back"
        text1 = "was successfully removed from database."
    elif language[message.chat.id] == "russian":
        block = "–¢—É—Ä"
        bck = "–ù–∞–∑–∞–¥"
        text1 = "—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    languages = ['Russian', 'English', 'Spanish']
    blocks = database.child('blocks').get()
    
    # –ü–æ–∏—Å–∫ –±–ª–æ–∫–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
    code = None
    for block_code, block_data in blocks.items():
        for lang in languages:
            if lang in block_data and block_data[lang].get('name') == block_name[message.chat.id]:
                code = block_code
                break

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–ª–æ–∫–∞ –ø–æ –∫–æ–¥—É
    block_data = database.child('blocks').child(code).get()
    if block_data:
        try:
            # –£–¥–∞–ª—è–µ–º –±–ª–æ–∫ –∏–∑ Firebase Realtime Database
            database.child('blocks').child(code).delete()
            bot.send_message(message.chat.id, f"{block} {block_name[message.chat.id]} {text1}")
            block_name[message.chat.id] = ""
            user_state[message.chat.id] = START
            view_blocks(message)
        except Exception as e:
            bot.send_message(message.chat.id, f"ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–ª–æ–∫–∞: {str(e)}")
    else:
        bot.send_message(message.chat.id, "ERROR: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–¥ –±–ª–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏
def main_excursion(message):
    global code_entering, all_excursions
    code_entering[message.chat.id] = 0
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    all_excursions[message.chat.id] = database.child('blocks').child(message.text).get()
    enter_lang = 0
    langs = 0
    text = ""
    if all_excursions[message.chat.id]:
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É —è–∑—ã–∫–æ–≤–æ–º—É —Ä–∞–∑–¥–µ–ª—É
        for lang_tuple in all_excursions[message.chat.id].items():
            lang = lang_tuple[0] if isinstance(lang_tuple, tuple) else lang_tuple
            if lang.lower() == language[message.chat.id]:
                enter_lang = 1
                if language[message.chat.id] == "spanish":
                    all_excursions[message.chat.id] = all_excursions[message.chat.id]['Spanish']
                    button1 = types.KeyboardButton("Volver a la selecci√≥n de idioma")
                    button2 = types.KeyboardButton("Ir al recorrido")
                    text = "Ha ingresado exitosamente a la ventana del recorrido inicial. Para continuar, utilice los botones en la parte inferior de la pantalla."
                elif language[message.chat.id] == "english":
                    all_excursions[message.chat.id] = all_excursions[message.chat.id]['English']
                    button1 = types.KeyboardButton("Return to language selection")
                    button2 = types.KeyboardButton("Go to the tour")
                    text = "You have successfully entered the initial tour window. To continue, use the buttons at the bottom of the screen."
                elif language[message.chat.id] == "russian":
                    all_excursions[message.chat.id] = all_excursions[message.chat.id]['Russian']
                    button1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞")
                    button2 = types.KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏")
                    text = "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç—É—Ä–∞. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞."
                markup.row(button2)
                markup.row(button1)
                bot.send_message(message.chat.id, text=text, reply_markup=markup)
            else:
                if lang == "English":
                    langs = 2
                    break
                elif lang == "Spanish":
                    langs = 1

        if enter_lang == 0:
            if language[message.chat.id] == "spanish":
                button1 = types.KeyboardButton("Volver a la selecci√≥n de idioma")
                button2 = types.KeyboardButton("Ir al recorrido")
                if langs == 2:
                    all_excursions[message.chat.id] = all_excursions[message.chat.id]['English']
                    text ="Lo sentimos, pero parece que tu recorrido no est√° disponible en tu idioma. Te redirigiremos autom√°ticamente al ingl√©s. Si tiene alguna pregunta, comun√≠quese con su gu√≠a. Para continuar, utilice los botones en la parte inferior de la pantalla.\n¬°Le pedimos disculpas!"
                elif langs == 0:
                    all_excursions[message.chat.id] = all_excursions[message.chat.id]['Russian']
                    text ="Lo sentimos, pero parece que tu recorrido no est√° disponible en tu idioma. Te redirigiremos autom√°ticamente al ruso. Si tiene alguna pregunta, comun√≠quese con su gu√≠a. Para continuar, utilice los botones en la parte inferior de la pantalla.\n¬°Le pedimos disculpas!"
            elif language[message.chat.id] == "english":
                button1 = types.KeyboardButton("Return to language selection")
                button2 = types.KeyboardButton("Go to the tour")
                if langs == 1:
                    all_excursions[message.chat.id] = all_excursions[message.chat.id]['Spanish']
                    text = "We're sorry, but it looks like your tour is not available in your language. We'll automatically redirect you to Spanish. For any questions, please contact your tour guide. To continue, use the buttons at the bottom of the screen.\nWe apologize!"
                elif langs == 0:
                    all_excursions[message.chat.id] = all_excursions[message.chat.id]['Russian']
                    text = "We are sorry, but it seems that your tour is not available in your language. We will automatically redirect you to Russian. For any questions, please contact the guide. To continue, use the buttons at the bottom of the screen.\nWe apologize!"
            elif language[message.chat.id] == "russian":
                button1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —è–∑—ã–∫–∞")
                button2 = types.KeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏")
                if langs == 2:
                    all_excursions[message.chat.id] = all_excursions[message.chat.id]['English']
                    text = "–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –ø–æ—Ö–æ–∂–µ –≤–∞—à —Ç—É—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤–∞—à–µ–º —è–∑—ã–∫–µ. –ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≥–∏–¥—É. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.\n–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è!"
                elif langs == 1:
                    all_excursions[message.chat.id] = all_excursions[message.chat.id]['Spanish']
                    text = "–°–æ–∂–∞–ª–µ–µ–º, –Ω–æ –ø–æ—Ö–æ–∂–µ –≤–∞—à —Ç—É—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤–∞—à–µ–º —è–∑—ã–∫–µ. –ú—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –Ω–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≥–∏–¥—É. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.\n–ü—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è!"
            markup.row(button2)
            markup.row(button1)
            nmes = bot.send_message(message.chat.id, text=text, reply_markup=markup)
            add_message_id(message.chat.id, nmes.message_id)

#----------------------FULL TOUR---------------------------------
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–∏–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –ø–æ–∏–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
current_point_index = {}
cur_ex_ind = {}
def get_language_variables(chat_id):
    if language[chat_id] == "spanish":
        return {
            "name": "Nombre del recorrido",
            "descrout": "No hay descripci√≥n disponible",
            "descr": "Descripci√≥n",
            "photoMis": "La foto no se pudo cargar.",
            "photoErr": "Error al cargar la foto.",
            "audioMis": "Error al cargar el audio.",
            "audioErr": "Error al cargar audio.",
            "text": "Haga clic en 'Siguiente' para continuar",
            "text_end": "Has llegado al final del recorrido",
            "button_text_next": "Siguiente",
            "button_text_back": "Volver al men√∫ del recorrido",
            "take_end" : "Se ha llegado al final de la excursi√≥n.",
            "finish" : "Volver"
        }
    elif language[chat_id] == "english":
        return {
            "name": "Tour name",
            "descrout": "No description",
            "descr": "Description",
            "photoMis": "Photo failed to load.",
            "photoErr": "Error loading photo.",
            "audioMis": "Audio failed to load.",
            "audioErr": "Error loading audio.",
            "text": "Click 'Next' to continue",
            "text_end": "You have reached the end of the tour",
            "button_text_next": "Next",
            "button_text_back": "Return to the tour menu",
            "take_end" : "The end of the tour has been reached.",
            "finish" : "Back"
        }
    else:
        return {
            "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏",
            "descrout": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            "descr": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "photoMis": "–§–æ—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.",
            "photoErr": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.",
            "audioMis": "–ê—É–¥–∏–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.",
            "audioErr": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ.",
            "text": "–ù–∞–∂–º–∏—Ç–µ '–î–∞–ª–µ–µ' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            "text_end": "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ —Ç—É—Ä–∞",
            "button_text_next": "–î–∞–ª–µ–µ",
            "button_text_back": "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —ç–∫—Å–∫—É—Ä—Å–∏–∏",
            "take_end" : "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —ç–∫—Å–∫—É—Ä—Å–∏–∏.",
            "finish" : "–ù–∞–∑–∞–¥"
        }

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏
def full_tour(message):
    global current_point_index, user_state
    chat_id = message.chat.id
    add_message_id(chat_id, message.message_id)
    global code_entering
    code_entering[chat_id] = 0
    user_state[chat_id] = 'USER_POINT_FULL_VIEW'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    lang_vars = get_language_variables(chat_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤ –±–ª–æ–∫–µ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö
    points = all_excursions[chat_id].get('points', {})
    if not points:
        nmess1 = bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤ —ç—Ç–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏.")
        add_message_id(message.chat.id, nmess1.message_id)
        return

    points = dict(sorted(points.items(), key=lambda item: item[1].get('order', 0)))
    current_point_index[chat_id] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
    nmess = bot.send_message(chat_id, f"{lang_vars['name']}: {all_excursions[chat_id].get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è')}")
    add_message_id(chat_id, nmess.message_id)
    send_point(chat_id, message, points, lang_vars)


def send_point(chat_id, message, points, lang_vars):
    point_keys = list(points.keys())
    add_message_id(chat_id, message.message_id)
    if not point_keys:
        nmes = bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ç–æ—á–∫–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞.")
        add_message_id(chat_id, nmes.message_id)
        return

    current_index = current_point_index.get(chat_id, 0)
    if current_index >= len(point_keys):
        nmes = bot.send_message(chat_id, lang_vars['take_end'])
        add_message_id(chat_id, nmes.message_id)
        return

    point_name = point_keys[current_index]
    details = points[point_name]
    description = details.get('description', lang_vars['descrout'])
    photo_url = details.get('photo')
    audio_url = details.get('audio')

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if photo_url:
        if photo_url == "No file":
            msg = bot.send_message(chat_id, text=f"{description}")
            add_message_id(chat_id, msg.message_id)
        else:
            try:
                response = requests.get(photo_url)
                if response.status_code == 200:
                    msg = bot.send_photo(chat_id, photo_url, caption=f"{description}")
                else:
                    msg = bot.send_message(chat_id, lang_vars['photoMis'])
            except requests.exceptions.RequestException:
                msg = bot.send_message(chat_id, lang_vars['photoErr'])
            add_message_id(chat_id, msg.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if audio_url:
        if audio_url != "No file":
            try:
                response = requests.get(audio_url)
                if response.status_code == 200:
                    msg = bot.send_audio(chat_id, audio_url)
                else:
                    msg = bot.send_message(chat_id, lang_vars['audioMis'])
            except requests.exceptions.RequestException:
                msg = bot.send_message(chat_id, lang_vars['audioErr'])
            add_message_id(chat_id, msg.message_id)

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if current_index < len(point_keys) - 1:
        button_next = types.KeyboardButton(lang_vars['button_text_next'])
        text = lang_vars['text']
        markup.add(button_next)
    else:
        text = lang_vars['text_end']
    button_back = types.KeyboardButton(lang_vars['button_text_back'])
    markup.add(button_back)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    msg = bot.send_message(chat_id, text, reply_markup=markup)
    add_message_id(chat_id, msg.message_id)


@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'USER_POINT_FULL_VIEW')
def handle_navigation(message):
    global user_state, current_point_index
    chat_id = message.chat.id
    lang_vars = get_language_variables(chat_id)
    points = all_excursions[chat_id].get('points', {})
    points = dict(sorted(points.items(), key=lambda item: item[1].get('order', 0)))

    if message.text in [lang_vars['button_text_next']]:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
        if current_point_index[chat_id] < len(points) - 1:
            current_point_index[chat_id] += 1
            send_point(chat_id, message, points, lang_vars)
        else:
            nmess = bot.send_message(chat_id, lang_vars['take_end'])
            add_message_id(chat_id, nmess.message_id)
    elif message.text in [lang_vars['button_text_back']]:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É —ç–∫—Å–∫—É—Ä—Å–∏–∏
        add_message_id(chat_id, message.message_id)
        user_state[message.chat.id] = NOACT
        current_point_index[chat_id] = 0
        handle_return_to_language_selection(message)
        return

#----------------------PARTIAL TOUR---------------------------------
button_lst = {}
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏
def partial_tour(message):
    add_message_id(message.chat.id, message.message_id)
    global code_entering, user_state, button_lst, cur_ex_ind
    code_entering[message.chat.id] = 0
    cur_ex_ind[message.chat.id] = 0
    button_lst[message.chat.id] = []
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —è–∑—ã–∫–æ–º, –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∫–æ–¥–æ–º –±–ª–æ–∫–∞
    if language[message.chat.id] == "spanish":
        name = "Nombre del recorrido"
    elif language[message.chat.id] == "english":
        name = "Tour name"
    elif language[message.chat.id] == "russian":
        name = "–ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏"
    nmess = bot.send_message(message.chat.id, f"{name}: {all_excursions[message.chat.id].get('name')}")
    add_message_id(message.chat.id, nmess.message_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    points = all_excursions[message.chat.id].get('points', {})
    points = dict(
    sorted(
        points.items(),
        key=lambda item: item[1]['order']
        )
    )
    for short_name in points:
        print(short_name)
        order = str(points[short_name].get('order'))
        button = types.KeyboardButton(f"{order}. {short_name}")
        markup.add(button)
        button_lst[message.chat.id].append(f"{order}. {short_name}")

    if language[message.chat.id] == "spanish":
        button1 = types.KeyboardButton("Volver al men√∫ del recorrido")
        text = "A continuaci√≥n te presentamos los principales lugares que puedes visitar como parte de nuestra excursi√≥n. ¬°Haz clic en el bot√≥n con el nombre correspondiente para saber m√°s sobre el lugar especificado!"
    elif language[message.chat.id] == "english":
        button1 = types.KeyboardButton("Return to the tour menu")
        text = "Here are the main places that you can visit during our tour. Click on the button with the corresponding name to learn more about the indicated place!"
    elif language[message.chat.id] == "russian":
        button1 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é —ç–∫—Å–∫—É—Ä—Å–∏–∏")
        text = "–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏. –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–± —É–∫–∞–∑–∞–Ω–Ω–æ–º –º–µ—Å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ!"
    markup.row(button1)
    nmess = bot.send_message(message.chat.id, text = text, reply_markup=markup)
    add_message_id(message.chat.id, nmess.message_id)
    user_state[message.chat.id] = 'USER_POINT_VIEW'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'USER_POINT_VIEW')
def handle_point_selection(message):
    global user_state, cur_ex_ind
    add_message_id(message.chat.id, message.message_id)
    lang_vars = get_language_variables(message.chat.id)
    pattern = r"^\d+\.\s*(.*)"
    if message.text in [lang_vars['button_text_back']]:
        user_state[message.chat.id] = NOACT
        handle_return_to_language_selection(message)
        cur_ex_ind[message.chat.id] = 0
        return
    elif message.text in button_lst[message.chat.id]:
        mess = re.search(pattern, message.text).group(1)
        points = all_excursions[message.chat.id].get('points', {})
    elif message.text in [lang_vars['button_text_next']]:
        if cur_ex_ind.get(message.chat.id) == 0:
            if language[message.chat.id] == "spanish":
                bot.send_message(message.chat.id, "Por favor use los botones para continuar.")
            elif language[message.chat.id] == "english":
                bot.send_message(message.chat.id, "Please use the buttons to continue.")
            elif language[message.chat.id] == "russian":
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            add_message_id(message.chat.id, message.message_id)
            partial_tour(message)
            return
        else:
            points_cur = all_excursions[message.chat.id].get('points', {})
            points_cur = dict(
                sorted(
                    points_cur.items(),
                    key=lambda item: item[1]['order']
                )
            )
            point_keys = list(points_cur.keys())
            i = 0
            mess = ""
            for shnm in point_keys:
                i += 1
                if i == cur_ex_ind[message.chat.id] + 1:
                    mess = shnm
            points = all_excursions[message.chat.id].get('points', {})
            if mess == "":
                user_state[message.chat.id] = NOACT
                handle_return_to_language_selection(message)
                cur_ex_ind[message.chat.id] = 0
                return
    else:
        if language[message.chat.id] == "spanish":
            ms = bot.send_message(message.chat.id, "Por favor use los botones para continuar.")
        elif language[message.chat.id] == "english":
            ms = bot.send_message(message.chat.id, "Please use the buttons to continue.")
        elif language[message.chat.id] == "russian":
            ms = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        add_message_id(message.chat.id, message.message_id)
        add_message_id(message.chat.id, ms.message_id)
        partial_tour(message)
        return
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    #nmess = bot.send_message(message.chat.id, f"{all_excursions[message.chat.id].get('name')}")
    #add_message_id(message.chat.id, nmess.message_id)

    details = points[mess]
    description = details.get('description', lang_vars['descrout'])
    photo_url = details.get('photo')
    audio_url = details.get('audio')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if photo_url:
        if photo_url == "No file":
            nmess = bot.send_message(message.chat.id, text=f"{description}")
        else:
            try:
                response = requests.get(photo_url)
                if response.status_code == 200:
                    nmess = bot.send_photo(message.chat.id, photo_url, caption=f"{description}")
                else:
                    nmess = bot.send_message(message.chat.id, lang_vars['photoMis'])
            except requests.exceptions.RequestException:
                nmess = bot.send_message(message.chat.id, lang_vars['photoErr'])
        add_message_id(message.chat.id, nmess.message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if audio_url:
        if audio_url != "No file":
            try:
                response = requests.get(audio_url)
                if response.status_code == 200:
                    nmess = bot.send_audio(message.chat.id, audio_url)
                else:
                    nmess = bot.send_message(message.chat.id, lang_vars['audioMis'])
            except requests.exceptions.RequestException:
                nmess = bot.send_message(message.chat.id, lang_vars['audioErr'])
            add_message_id(message.chat.id, nmess.message_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    points_new = all_excursions[message.chat.id].get('points', {})
    points_new = dict(
    sorted(
        points_new.items(),
        key=lambda item: item[1]['order']
        )
    )
    point_keys = list(points_new.keys())
    k = 0
    i = 0
    for shnm in point_keys:
        i += 1
        if shnm == mess:
            k = i
    cur_ex_ind[message.chat.id] = k
    if k < len(point_keys):
        button_next = types.KeyboardButton(lang_vars['button_text_next'])
        text = lang_vars['text']
        markup.add(button_next)
    else:
        text = lang_vars['text_end']

    for short_name in points_new:
        order = str(points[short_name].get('order'))
        button = types.KeyboardButton(f"{order}. {short_name}")
        markup.add(button)

    button1 = types.KeyboardButton(lang_vars['button_text_back'])
    markup.add(button1)
    nmess = bot.send_message(message.chat.id, text = text, reply_markup=markup)
    add_message_id(message.chat.id, nmess.message_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∫–Ω–∞ –∞–¥–º–∏–Ω–∞
def main_admin(message):
    global code_entering
    code_entering[message.chat.id] = 0
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    
    if language[message.chat.id] == "spanish":
        button2 = types.KeyboardButton("Volver al men√∫")
        button1 = types.KeyboardButton("Gesti√≥n de excursiones")
        text1 = "Has entrado en la ventana de administraci√≥n."
    elif language[message.chat.id] == "english":
        button2 = types.KeyboardButton("Go back to menu")
        button1 = types.KeyboardButton("Excursion management")
        text1 = "You have entered the admin window."
    elif language[message.chat.id] == "russian":
        button2 = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
        button1 = types.KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏—è–º–∏")
        text1 = "–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –æ–∫–Ω–æ."
    
    markup.add(button1, button2)
    bot.send_message(message.chat.id, text=text1, reply_markup=markup)

###############################################################
#---------------------EDITION GLOBAL--------------------------#
###############################################################

modif_code = {}
full_data_mod = {}
curr_lang_glob = {}
admin_data = {}

@bot.message_handler(func=lambda message: user_state[message.chat.id] == 'BLOCK_EDIT')
def handle_block_action(message):
    global user_state, modif_code, full_data_mod, block_name, user_data, curr_lang_glob, admin_data
    full_data_mod[message.chat.id] = {}
    languages = ['Russian', 'English', 'Spanish']
    code = None
    curr_lang_glob[message.chat.id] = ""
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        user_state[message.chat.id] = START
        view_blocks(message)
        return
    elif message.text in ["Add tour language", "Agregar idioma del recorrido", "–î–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫ —Ç—É—Ä–∞"]:
        blocks = database.child('blocks').get()
        for block_code, block_data in blocks.items():
            for lang in languages:
                if lang in block_data and block_data[lang].get('name') == block_name[message.chat.id]:
                    code = block_code
                    break
        full_data_mod[message.chat.id] = database.child('blocks').child(code).get()
        modif_code[message.chat.id] = code
        block_name[message.chat.id] = ""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for lang in languages:
            if lang not in full_data_mod[message.chat.id]:
                button = types.KeyboardButton(lang)
                markup.add(button)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Atr√°s")
            text = "Selecciona el idioma en el que agregar√°s el tour. A continuaci√≥n se presentan √∫nicamente aquellos idiomas que a√∫n no est√°n incluidos en el complejo de esta excursi√≥n. Si no hay botones con idiomas en el panel, entonces ya se han agregado todos los idiomas disponibles para esta excursi√≥n."
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Back")
            text = "Select the language in which you will add the excursion. Below are only those languages ‚Äã‚Äãthat are not yet included in the complex of this excursion. If there are no buttons with languages ‚Äã‚Äãon the panel, then all available languages ‚Äã‚Äãhave already been added for this excursion."
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
            text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é. –ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –ª–∏—à—å —Ç–µ —è–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Å–µ –¥–∞–Ω–Ω–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏. –ï—Å–ª–∏ –Ω–∞ –ø–∞–Ω–µ–ª–∏ –∫–Ω–æ–ø–æ–∫ —Å —è–∑—ã–∫–∞–º–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–π —ç–∫—Å–∫—É—Ä—Å–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É–∂–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏."
        markup.add(button1)
        bot.send_message(message.chat.id, text = text, reply_markup=markup)
        user_state[message.chat.id] = 'ADD_LANDG_FIRST'

        user_data = getattr(bot, 'user_data', {})
        user_data[message.chat.id] = {'block_code': modif_code[message.chat.id], 'languages': full_data_mod[message.chat.id]}

        bot.user_data = user_data

    elif message.text in ["Seleccione el idioma del recorrido para editar", "Select the tour language for editing", "–í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫ —Ç—É—Ä–∞ –¥–ª—è –ø—Ä–∞–≤–∫–∏"]:
        blocks = database.child('blocks').get()
        for block_code, block_data in blocks.items():
            for lang in languages:
                if lang in block_data and block_data[lang].get('name') == block_name[message.chat.id]:
                    code = block_code
                    break
        full_data_mod[message.chat.id] = database.child('blocks').child(code).get()
        modif_code[message.chat.id] = code
        block_name[message.chat.id] = ""
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for lang in languages:
            if lang in full_data_mod[message.chat.id]:
                button = types.KeyboardButton(lang)
                markup.add(button)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Atr√°s")
            text = "Seleccione el idioma de su recorrido. Este recorrido ya se ha agregado en todos los idiomas que se enumeran a continuaci√≥n. Al seleccionar un idioma, podr√°s editar esta excursi√≥n agregada en ese idioma."
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Back")
            text = "Select the language of the tour. This tour has already been added in all the languages ‚Äã‚Äãlisted below. By selecting a language, you will be able to edit this tour added in this language."
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–ù–∞–∑–∞–¥")
            text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –ù–∞ –≤—Å–µ—Ö —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ —è–∑—ã–∫–∞—Ö –¥–∞–Ω–Ω–∞—è —ç–∫—Å–∫—É—Ä—Å–∏—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±—Ä–∞–≤ —è–∑—ã–∫, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –Ω–∞ —ç—Ç–æ–º —è–∑—ã–∫–µ."
        markup.add(button1)
        bot.send_message(message.chat.id, text = text, reply_markup=markup)
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'

        #user_data = getattr(bot, 'user_data', {})
        admin_data[message.chat.id] = {'block_code': modif_code[message.chat.id], 'languages': full_data_mod[message.chat.id]}

        #bot.user_data = user_data

#-----------------------ADD LANGUAGE---------------------------

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ADD_LANDG_FIRST')
def handle_language_choice_add(message):
    global modif_code, user_data, user_state
    user_id = message.chat.id
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        user_state[message.chat.id] = START
        view_blocks(message)
        return
    lang_map = {"Ruso": "Russian", "Ingl√©s": "English", "Espa√±ol": "Spanish", "Russian": "Russian",
                "English": "English", "Spanish": "Spanish", "–†—É—Å—Å–∫–∏–π": "Russian", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "English", "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "Spanish"}
    if message.text in lang_map:
        selected_lang = lang_map[message.text]
        if user_id not in user_data:
            user_data[user_id] = {'block_code': '', 'languages': {}}
        user_data[user_id]['current_language'] = selected_lang
        if 'languages' not in user_data[user_id]:
            user_data[user_id]['languages'] = {}
        if selected_lang not in user_data[user_id]['languages']:
            user_data[user_id]['languages'][selected_lang] = {'name': '', 'points': {}}
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Introduce el nombre de la excursi√≥n: ")
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Enter the name of the excursion: ")
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: ")
        user_state[user_id] = 'ADD_BLOCK_NAME_FIRST'
    else:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Seleccione un idioma de las opciones proporcionadas.")
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Please select a language from the options provided.")
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ADD_BLOCK_NAME_FIRST')
def add_block_name_add(message):
    global user_data, user_state
    user_id = message.chat.id
    user_data[user_id]['languages'][user_data[user_id]['current_language']]['name'] = message.text
    if language[message.chat.id] == "spanish":
        bot.send_message(user_id, text="Por favor introduzca una descripci√≥n de la excursi√≥n. Se mostrar√° al cliente en el men√∫ de excursiones.")
    elif language[message.chat.id] == "english":
        bot.send_message(user_id, text="Please enter a description of the excursion. It will be displayed to the client in the excursion menu.")
    elif language[message.chat.id] == "russian":
        bot.send_message(user_id, text="–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –û–Ω–æ –±—É–¥–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–ª–∏–µ–Ω—Ç—É –≤ –º–µ–Ω—é —ç–∫—Å–∫—É—Ä—Å–∏–∏.")
    user_state[user_id] = 'ADD_DESCRIPTION_MAIN_FIRST'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ADD_DESCRIPTION_MAIN_FIRST')
def add_description_main_add(message):
    global user_data, user_state
    user_id = message.chat.id
    user_data[user_id]['languages'][user_data[user_id]['current_language']]['description'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language[message.chat.id] == "spanish":
        button1 = types.KeyboardButton("Si")
        button2 = types.KeyboardButton("No")
        markup.row(button1, button2)
        bot.send_message(user_id, text="¬øPrefieres el audio?", reply_markup=markup)
    elif language[message.chat.id] == "english":
        button1 = types.KeyboardButton("Yes")
        button2 = types.KeyboardButton("No")
        markup.row(button1, button2)
        bot.send_message(user_id, text="Do we add audio tape?", reply_markup=markup)
    elif language[message.chat.id] == "russian":
        button1 = types.KeyboardButton("–î–∞")
        button2 = types.KeyboardButton("–ù–µ—Ç")
        markup.row(button1, button2)
        bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª?", reply_markup=markup)
    user_state[user_id] = 'CONF_AUDIO_FIRST'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'CONF_AUDIO_FIRST')
def check_audio_addition_add(message):
    global user_data, user_state
    user_id = message.chat.id
    if message.text in ["–î–∞", "Yes", "Si"]:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Enviar un archivo de audio: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Send an audio file: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = 'ADD_AUDIO_FIRST'
    elif message.text in ["–ù–µ—Ç", "No"]:
        user_data[user_id]['current_audio_url'] = "No file"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="¬øPrefieres foto?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="Do we add photo?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ?", reply_markup=markup)
        user_state[user_id] = 'CONF_PHOTO_FIRST'

@bot.message_handler(content_types=['audio'], func=lambda message: user_state.get(message.chat.id) == 'ADD_AUDIO_FIRST')
def add_audio_add(message):
    global user_data, user_state
    user_id = message.chat.id
    if user_id not in user_data:
        user_data[user_id] = {}
    try:
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        if 'block_code' not in user_data[user_id] or 'current_language' not in user_data[user_id]:
            raise ValueError("Missing block_code or current_language")
        file_name = f"{user_data[user_id]['block_code']}_{user_data[user_id]['current_language']}_{len(user_data[user_id]['languages'][user_data[user_id]['current_language']]['points'])}.mp3"
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Firebase Storage
        blob = bucket.blob(file_name)
        blob.upload_from_string(downloaded_file, content_type='audio/mpeg')
        blob.make_public()
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞
        audio_url = blob.public_url
        user_data[user_id]['current_audio_url'] = audio_url
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="¬øPrefieres foto?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="Do we add photo?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ?", reply_markup=markup)
        user_state[user_id] = 'CONF_PHOTO_FIRST'
    except Exception as e:
        bot.send_message(user_id, f"Error al procesar el archivo de audio: {str(e)}")
        logger.error(f"Error processing audio file: {str(e)}")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'CONF_PHOTO_FIRST')
def check_photo_addition_add(message):
    global user_data, user_state
    user_id = message.chat.id
    if message.text in ["–î–∞", "Yes", "Si"]:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Enviar una foto: ")
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Send photo: ")
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é: ")
        user_state[user_id] = 'ADD_PHOTO_FIRST'
    elif message.text in ["–ù–µ—Ç", "No"]:
        user_data[user_id]['current_photo_url'] = "No file"
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Agregue un nombre corto para el block de tour. Este es el nombre que el cliente ver√° en el bot√≥n: ")
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Add a short name for this excursion block. This name will be seen by the client on the button: ")
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ: ")
        user_state[user_id] = 'SHORT_NAME_FIRST'

@bot.message_handler(content_types=['photo'], func=lambda message: user_state.get(message.chat.id) == 'ADD_PHOTO_FIRST')
def add_photo_add(message):
    global user_data, user_state
    user_id = message.chat.id
    if user_id not in user_data:
        user_data[user_id] = {}
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        if 'block_code' not in user_data[user_id] or 'current_language' not in user_data[user_id]:
            raise ValueError("Missing block_code or current_language")
        file_name = f"{user_data[user_id]['block_code']}_{user_data[user_id]['current_language']}_{len(user_data[user_id]['languages'][user_data[user_id]['current_language']]['points'])}_photo.jpg"
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Firebase Storage
        blob = bucket.blob(file_name)
        blob.upload_from_string(downloaded_file, content_type='image/jpeg')
        blob.make_public()
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞
        photo_url = blob.public_url
        user_data[user_id]['current_photo_url'] = photo_url
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Foto recibida. Agregue un nombre corto para el block de tour. Este es el nombre que el cliente ver√° en el bot√≥n: ")
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Photo received. Add a short name for this excursion block. This name will be seen by the client on the button: ")
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ: ")
        user_state[user_id] = 'SHORT_NAME_FIRST'
    except Exception as e:
        bot.send_message(user_id, f"Error al procesar el archivo de photo: {str(e)}")
        logger.error(f"Error processing photo file: {str(e)}")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'SHORT_NAME_FIRST')
def add_short_name_add(message):
    global user_data, user_state
    user_id = message.chat.id
    short_name = message.text
    user_data[user_id]['current_short_name'] = short_name
    if language[message.chat.id] == "spanish":
        bot.send_message(user_id, "Nombre corto recibido. Ahora agregue el n√∫mero de secuencia:")
    elif language[message.chat.id] == "english":
        bot.send_message(user_id, "Short name received. Now add the serial number:")
    elif language[message.chat.id] == "russian":
        bot.send_message(user_id, "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: ")
    user_state[user_id] = 'ADD_ORDER_FIRST'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ADD_ORDER_FIRST')
def add_order_add(message):
    global user_data, user_state
    user_id = message.chat.id
    order = message.text
    user_data[user_id]['order'] = int(order)
    if language[message.chat.id] == "spanish":
        bot.send_message(user_id, "Nombre corto recibido. Ahora agrega una descripci√≥n")
    elif language[message.chat.id] == "english":
        bot.send_message(user_id, "Short name received. Now add a description")
    elif language[message.chat.id] == "russian":
        bot.send_message(user_id, "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ")
    user_state[user_id] = 'ADD_DESCRIPTION_FIRST'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ADD_DESCRIPTION_FIRST')
def add_description_add(message):
    global user_data, user_state
    user_id = message.chat.id
    description = message.text
    current_lang = user_data[user_id]['current_language']
    short_name = user_data[user_id]['current_short_name']
    order = user_data[user_id]['order']
    user_data[user_id]['languages'][current_lang]['points'][short_name] = {
        'audio': user_data[user_id]['current_audio_url'],
        'photo': user_data[user_id]['current_photo_url'],
        'description': description,
        'order' : order
    }
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language[message.chat.id] == "spanish":
        markup.row('Agregar block', "Agregar idioma del recorrido", 'Terminar de agregar')
        bot.send_message(user_id, "Este parte a√±adido. ¬øQu√© sigue?", reply_markup=markup)
    elif language[message.chat.id] == "english":
        markup.row('Add block', "Add tour language", 'Finish adding')
        bot.send_message(user_id, "Block added. What's next?", reply_markup=markup)
    elif language[message.chat.id] == "russian":
        markup.row('–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫', "–î–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫ —Ç—É—Ä–∞", '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ')
        bot.send_message(user_id, "–ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω. –ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup)
    user_state[user_id] = 'CONFIRM_AUDIO_FIRST'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'CONFIRM_AUDIO_FIRST')
def confirm_audio_add(message):
    global user_state, user_data
    user_id = message.chat.id
    if message.text in ['–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫', 'Add block', 'Agregar block']:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="¬øPrefieres el audio?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="Do we add audio tape?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª?", reply_markup=markup)
        user_state[user_id] = 'CONF_AUDIO_FIRST'
    elif message.text in ["–î–æ–±–∞–≤–∏—Ç—å —è–∑—ã–∫ —Ç—É—Ä–∞", "Add tour language", "Agregar idioma del recorrido"]:
        user_state[message.chat.id] == 'BLOCK_EDIT'
        handle_block_action(message)
    elif message.text in ['–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', 'Finish adding', 'Terminar de agregar']:
        user_data = getattr(bot, 'user_data', {}).get(message.chat.id, {})
        block_code = user_data['block_code']
        languages = user_data['languages']
   
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Firebase Realtime Database
        block_ref = database.child('blocks').child(block_code)
        block_ref.set(languages)
        bot.user_data = getattr(bot, 'user_data', {})
        bot.user_data[message.chat.id] = {}
        user_state[message.chat.id] = START
        view_blocks(message)

#-----------------------FIN ADD LANGUAGE---------------------------

#-----------------------EDIT LANGUAGE------------------------------
ord_global = {}
@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'EDIT_LANG_FIRST')
def edit_lang_start(message):
    global curr_lang_glob, user_state
    lang_map = {"Ruso": "Russian", "Ingl√©s": "English", "Espa√±ol": "Spanish", "Russian": "Russian",
                "English": "English", "Spanish": "Spanish", "–†—É—Å—Å–∫–∏–π": "Russian", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "English", "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "Spanish"}
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        user_state[message.chat.id] = START
        view_blocks(message)
        return
    if message.text in lang_map:
        curr_lang_glob[message.chat.id] = message.text
        selected_lang = lang_map[curr_lang_glob[message.chat.id]]
        curr_lang_glob[message.chat.id] = selected_lang
        handle_edit_lang(message)
    else:
        if language[message.chat.id] == "spanish":
            bot.send_message(message.chat.id, text="Seleccione un idioma de las opciones proporcionadas.")
        elif language[message.chat.id] == "english":
            bot.send_message(message.chat.id, text="Please select a language from the options provided.")
        elif language[message.chat.id] == "russian":
            bot.send_message(message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        user_state[message.chat.id] = START
        view_blocks(message)

def handle_edit_lang(message):
    global user_state, full_data_mod, button_lst
    user_id = message.chat.id
    button_lst[message.chat.id] = []
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    full_data_mod[message.chat.id] = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).get()
    if language[message.chat.id] == "spanish":
        button1 = types.KeyboardButton("Cambiar nombre del recorrido")
        button2 = types.KeyboardButton("Cambiar descripci√≥n de la excursi√≥n")
        button3 = types.KeyboardButton("Eliminar excursi√≥n en este idioma")
        button4 = types.KeyboardButton("A√±adir bloque de excursiones")
        button5 = types.KeyboardButton("Atr√°s")
        btn = "Cambiar: "
        text="Seleccione la acci√≥n que desea realizar:"
    elif language[message.chat.id] == "english":
        button1 = types.KeyboardButton("Change excursion name")
        button2 = types.KeyboardButton("Change excursion description")
        button3 = types.KeyboardButton("Delete tour in this language")
        button4 = types.KeyboardButton("Add excursion block")
        button5 = types.KeyboardButton("Back")
        btn = "Modify: "
        text="Select the action you want to perform:"
    elif language[message.chat.id] == "russian":
        button1 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏")
        button2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏")
        button3 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ")
        button4 = types.KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏")
        button5 = types.KeyboardButton("–ù–∞–∑–∞–¥")
        btn = "–ò–∑–º–µ–Ω–∏—Ç—å: "
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å:"
    markup.row(button1)
    markup.row(button2)
    markup.row(button3)
    markup.row(button4)
    points = full_data_mod[message.chat.id].get('points', {})
    points = dict(
    sorted(
            points.items(),
            key=lambda item: item[1]['order']
          )
    )
    for short_name in points:
        order = str(points[short_name].get('order'))
        button = types.KeyboardButton(f"{btn}{order}. {short_name}")
        markup.add(button)
        button_lst[message.chat.id].append(f"{btn}{order}. {short_name}")
    markup.row(button5)
    bot.send_message(user_id, text=text, reply_markup=markup)
    user_state[user_id] = 'EDIT_LANG_HANGLE_SECOND'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'EDIT_LANG_HANGLE_SECOND')
def handle_edit_lang_selection(message):
    global modif_code, user_data, user_state, full_data_mod, button_lst
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        user_state[message.chat.id] = START
        view_blocks(message)
        return
    
    elif message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏", "Change excursion name", "Cambiar nombre del recorrido"]:
        name = full_data_mod[message.chat.id]['name']
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            text = f"Nombre de la excursi√≥n actual: {name}\nIntroduzca un nuevo nombre:"
            button = types.KeyboardButton("Atr√°s")
        elif language[message.chat.id] == "english":
            text = f"Current tour name: {name}\nEnter a new name:"
            button = types.KeyboardButton("Back")
        elif language[message.chat.id] == "russian":
            text = f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: {name}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
            button = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.row(button)
        bot.send_message(message.chat.id, text=text, reply_markup=markup)
        user_state[message.chat.id] = 'EDIT_LANG_NAME_THIRD'

    elif message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏", "Change excursion description", "Change excursion description"]:
        description = full_data_mod[message.chat.id]['description']
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            text = f"Descripci√≥n de la excursi√≥n actual: {description}\nIntroduzca un nuevo descripci√≥n:"
            button = types.KeyboardButton("Atr√°s")
        elif language[message.chat.id] == "english":
            text = f"Current tour description: {description}\nEnter a new description:"
            button = types.KeyboardButton("Back")
        elif language[message.chat.id] == "russian":
            text = f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏: {description}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
            button = types.KeyboardButton("–ù–∞–∑–∞–¥")
        markup.row(button)
        bot.send_message(message.chat.id, text=text, reply_markup=markup)
        user_state[message.chat.id] = 'EDIT_LANG_DESCRIPTION_THIRD'

    elif message.text in ["–£–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ", "Delete tour in this language", "Eliminar excursi√≥n en este idioma"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("S√≠")
            button2 = types.KeyboardButton("Atr√°s")
            text = "¬øEst√°s seguro de que deseas eliminar el recorrido en este idioma?"
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("Back")
            text = "Are you sure you want to delete the tour in this language?"
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–∞–∑–∞–¥")
            text = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç–∫—Å–∫—É—Ä—Å–∏—é –Ω–∞ –¥–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ?"
        markup.row(button1)
        markup.row(button2)
        bot.send_message(message.chat.id, text=text, reply_markup=markup)
        user_state[message.chat.id] = 'EDIT_LANG_BLOCK_DEL_THIRD'

    elif message.text in ["–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ —ç–∫—Å–∫—É—Ä—Å–∏–∏", "Add excursion block", "A√±adir bloque de excursiones"]:
        admin_data[message.chat.id] = {'block_code': modif_code[message.chat.id], 'languages': database.child('blocks').child(modif_code[message.chat.id]).get()}
        edit_start_add_block(message)

    elif message.text in button_lst[message.chat.id]:
        edit_selected_block(message)

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'EDIT_LANG_NAME_THIRD')
def edit_lang_rename(message):
    global user_state
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        handle_edit_lang(message)
        return

    database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('name').set(message.text)
    if language[message.chat.id] == "spanish":
        text = f"El nombre de la excursi√≥n se cambi√≥ correctamente a {message.text}"
    elif language[message.chat.id] == "english":
        text = f"Tour name successfully changed to {message.text}"
    elif language[message.chat.id] == "russian":
        text = f"–ù–∞–∑–≤–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}"
    bot.send_message(message.chat.id, text=text)
    user_state[message.chat.id] = 'EDIT_LANG_FIRST'
    handle_edit_lang(message)
    return

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'EDIT_LANG_DESCRIPTION_THIRD')
def edit_description_rename(message):
    global user_state
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        handle_edit_lang(message)
        return

    database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('description').set(message.text)
    if language[message.chat.id] == "spanish":
        text = f"La descripci√≥n de la excursi√≥n se cambi√≥ correctamente a {message.text}"
    elif language[message.chat.id] == "english":
        text = f"Tour description successfully changed to {message.text}"
    elif language[message.chat.id] == "russian":
        text = f"–û–ø–∏—Å–∞–Ω–∏–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {message.text}"
    bot.send_message(message.chat.id, text=text)
    user_state[message.chat.id] = 'EDIT_LANG_FIRST'
    handle_edit_lang(message)
    return

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'EDIT_LANG_BLOCK_DEL_THIRD')
def edit_lang_block_del(message):
    global user_state
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        handle_edit_lang(message)
        return
    elif message.text in ['–î–∞', 'Yes', 'S√≠']:
        database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).delete()
        if language[message.chat.id] == "spanish":
            text = f"Excursi√≥n en {curr_lang_glob[message.chat.id]} eliminada correctamente"
        elif language[message.chat.id] == "english":
            text = f"Tour in language {curr_lang_glob[message.chat.id]} successfully deleted"
        elif language[message.chat.id] == "russian":
            text = f"–≠–∫—Å–∫—É—Ä—Å–∏—è –Ω–∞ —è–∑—ã–∫–µ {curr_lang_glob[message.chat.id]} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"
        user_state[message.chat.id] = START
        view_blocks(message)

def edit_start_add_block(message):
    global admin_data, user_state
    user_id = message.chat.id
    admin_data[user_id]['current_language'] = curr_lang_glob[message.chat.id]
    admin_data[user_id]['languages'][admin_data[user_id]['current_language']]['name'] = full_data_mod[message.chat.id]['name']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language[message.chat.id] == "spanish":
        button1 = types.KeyboardButton("Si")
        button2 = types.KeyboardButton("No")
        markup.row(button1, button2)
        bot.send_message(user_id, text="¬øPrefieres el audio?", reply_markup=markup)
    elif language[message.chat.id] == "english":
        button1 = types.KeyboardButton("Yes")
        button2 = types.KeyboardButton("No")
        markup.row(button1, button2)
        bot.send_message(user_id, text="Do we add audio tape?", reply_markup=markup)
    elif language[message.chat.id] == "russian":
        button1 = types.KeyboardButton("–î–∞")
        button2 = types.KeyboardButton("–ù–µ—Ç")
        markup.row(button1, button2)
        bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª?", reply_markup=markup)
    user_state[user_id] = 'ED_CONF_AUDIO_FIRST'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ED_CONF_AUDIO_FIRST')
def check_audio_addition_edit(message):
    global admin_data, user_state
    user_id = message.chat.id
    if message.text in ["–î–∞", "Yes", "Si"]:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Enviar un archivo de audio: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Send an audio file: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = 'ED_ADD_AUDIO_FIRST'
    elif message.text in ["–ù–µ—Ç", "No"]:
        admin_data[user_id]['current_audio_url'] = "No file"
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="¬øPrefieres foto?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="Do we add photo?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ?", reply_markup=markup)
        user_state[user_id] = 'ED_CONF_PHOTO_FIRST'

@bot.message_handler(content_types=['audio'], func=lambda message: user_state.get(message.chat.id) == 'ED_ADD_AUDIO_FIRST')
def add_audio_edit(message):
    global admin_data, user_state
    user_id = message.chat.id
    if user_id not in admin_data:
        admin_data[user_id] = {}
    try:
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        if 'block_code' not in admin_data[user_id] or 'current_language' not in admin_data[user_id]:
            raise ValueError("Missing block_code or current_language")
        file_name = f"{admin_data[user_id]['block_code']}_{admin_data[user_id]['current_language']}_{len(admin_data[user_id]['languages'][admin_data[user_id]['current_language']]['points'])}.mp3"
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Firebase Storage
        blob = bucket.blob(file_name)
        blob.upload_from_string(downloaded_file, content_type='audio/mpeg')
        blob.make_public()
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞
        audio_url = blob.public_url
        admin_data[user_id]['current_audio_url'] = audio_url
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="¬øPrefieres foto?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(user_id, text="Do we add photo?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(user_id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ?", reply_markup=markup)
        user_state[user_id] = 'ED_CONF_PHOTO_FIRST'
    except Exception as e:
        bot.send_message(user_id, f"Error al procesar el archivo de audio: {str(e)}")
        logger.error(f"Error processing audio file: {str(e)}")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ED_CONF_PHOTO_FIRST')
def check_photo_addition_edit(message):
    global admin_data, user_state
    user_id = message.chat.id
    if message.text in ["–î–∞", "Yes", "Si"]:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Enviar una foto: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Send photo: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = 'ED_ADD_PHOTO_FIRST'
    elif message.text in ["–ù–µ—Ç", "No"]:
        admin_data[user_id]['current_photo_url'] = "No file"
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Agregue un nombre corto para el block de tour. Este es el nombre que el cliente ver√° en el bot√≥n: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Add a short name for this excursion block. This name will be seen by the client on the button: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = 'ED_SHORT_NAME_FIRST'

@bot.message_handler(content_types=['photo'], func=lambda message: user_state.get(message.chat.id) == 'ED_ADD_PHOTO_FIRST')
def add_photo_edit(message):
    global admin_data, user_state
    user_id = message.chat.id
    if user_id not in admin_data:
        admin_data[user_id] = {}
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        if 'block_code' not in admin_data[user_id] or 'current_language' not in admin_data[user_id]:
            raise ValueError("Missing block_code or current_language")
        file_name = f"{admin_data[user_id]['block_code']}_{admin_data[user_id]['current_language']}_{len(admin_data[user_id]['languages'][admin_data[user_id]['current_language']]['points'])}_photo.jpg"
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Firebase Storage
        blob = bucket.blob(file_name)
        blob.upload_from_string(downloaded_file, content_type='image/jpeg')
        blob.make_public()
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞
        photo_url = blob.public_url
        admin_data[user_id]['current_photo_url'] = photo_url
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Foto recibida. Agregue un nombre corto para el block de tour. Este es el nombre que el cliente ver√° en el bot√≥n: ")
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Photo received. Add a short name for this excursion block. This name will be seen by the client on the button: ")
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—É—á–µ–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —ç–∫—Å–∫—É—Ä—Å–∏–∏. –≠—Ç–æ –∏–º—è –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å –∫–ª–∏–µ–Ω—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ: ")
        user_state[user_id] = 'ED_SHORT_NAME_FIRST'
    except Exception as e:
        bot.send_message(user_id, f"Error al procesar el archivo de photo: {str(e)}")
        logger.error(f"Error processing photo file: {str(e)}")

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ED_SHORT_NAME_FIRST')
def add_short_name_edit(message):
    global admin_data, user_state
    user_id = message.chat.id
    short_name = message.text
    admin_data[user_id]['current_short_name'] = short_name
    if language[message.chat.id] == "spanish":
        bot.send_message(user_id, "Nombre corto recibido. Ahora agregue el n√∫mero de secuencia:")
    elif language[message.chat.id] == "english":
        bot.send_message(user_id, "Short name received. Now add the serial number:")
    elif language[message.chat.id] == "russian":
        bot.send_message(user_id, "–ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –ø–æ–ª—É—á–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä: ")
    user_state[user_id] = 'ED_ADD_ORDER_FIRST'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ED_ADD_ORDER_FIRST')
def add_order_edit(message):
    global admin_data, user_state
    user_id = message.chat.id
    order = message.text
    admin_data[user_id]['order'] = int(order)
    if language[message.chat.id] == "spanish":
        bot.send_message(user_id, "Ahora agrega una descripci√≥n")
    elif language[message.chat.id] == "english":
        bot.send_message(user_id, "Now add a description")
    elif language[message.chat.id] == "russian":
        bot.send_message(user_id, "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ")
    user_state[user_id] = 'ED_ADD_DESCRIPTION_FIRST'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ED_ADD_DESCRIPTION_FIRST')
def add_description_edit(message):
    global admin_data, user_state, ord_global
    user_id = message.chat.id
    ord_global[user_id] = 1000
    description = message.text
    current_lang = admin_data[user_id]['current_language']
    short_name = admin_data[user_id]['current_short_name']
    order = admin_data[user_id]['order']
    ord_global[user_id] = order
    admin_data[user_id]['languages'][current_lang]['points'][short_name] = {
        'audio': admin_data[user_id]['current_audio_url'],
        'photo': admin_data[user_id]['current_photo_url'],
        'description': description,
        'order' : order
    }

    for srt_nm in admin_data[user_id]['languages'][current_lang]['points']:
        cur_ord = admin_data[user_id]['languages'][current_lang]['points'][srt_nm]['order']
        if srt_nm != short_name and cur_ord >= ord_global[user_id]:
            admin_data[user_id]['languages'][current_lang]['points'][srt_nm]['order'] = cur_ord + 1

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language[message.chat.id] == "spanish":
        markup.row('Terminar de agregar', 'Cancelar')
        bot.send_message(user_id, "Este parte a√±adido", reply_markup=markup)
    elif language[message.chat.id] == "english":
        markup.row('Finish adding', 'Cancel')
        bot.send_message(user_id, "Block added", reply_markup=markup)
    elif language[message.chat.id] == "russian":
        markup.row('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', '–û—Ç–º–µ–Ω–∞')
        bot.send_message(user_id, "–ë–ª–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", reply_markup=markup)
    user_state[user_id] = 'ED_CONFIRM_AUDIO_FIRST'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'ED_CONFIRM_AUDIO_FIRST')
def confirm_audio_edit(message):
    global user_state, admin_data
    user_id = message.chat.id
    ord_global[user_id] = 1000
    if message.text in ['–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ', 'Finish adding', 'Terminar de agregar']:
        current_lang = admin_data[user_id]['current_language']
        points = admin_data[user_id]['languages'][current_lang]['points']
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Firebase Realtime Database
        #print(points, "\n\n")
        #print(database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').get(), "\n\n")
        block_ref = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points')
        block_ref.delete()
        block_ref.set(points)
        admin_data[message.chat.id] = {'block_code': modif_code[message.chat.id], 'languages': {}}
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        handle_edit_lang(message)
    else:
        admin_data[message.chat.id] = {'block_code': modif_code[message.chat.id], 'languages': {}}
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        handle_edit_lang(message)
        
short_name = {}
def edit_selected_block(message):
    global full_data_mod, user_state, short_name
    lang_vars = get_language_variables(message.chat.id)
    pattern = r"\d+\.\s(.+)$"
    match = re.search(pattern, message.text)
    if match:
        short_name[message.chat.id] = match.group(1)
    edit_selected_block_cont(message)

def edit_selected_block_cont(message):
    global full_data_mod, user_state, short_name
    lang_vars = get_language_variables(message.chat.id)
    full_data_mod[message.chat.id] = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).get()
    points = full_data_mod[message.chat.id]['points']
    details = points[short_name[message.chat.id]]
    description = details.get('description', lang_vars['descrout'])
    photo_url = details.get('photo')
    audio_url = details.get('audio')
    order = details.get('order')
    bot.send_message(message.chat.id, text=f"{order}. {short_name[message.chat.id]}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if photo_url:
        if photo_url == "No file":
            nmess = bot.send_message(message.chat.id, text=f"{lang_vars['descr']}: {description}")
        else:
            try:
                response = requests.get(photo_url)
                if response.status_code == 200:
                    nmess = bot.send_photo(message.chat.id, photo_url, caption=f"{lang_vars['descr']}: {description}")
                else:
                    nmess = bot.send_message(message.chat.id, lang_vars['photoMis'])
            except requests.exceptions.RequestException:
                nmess = bot.send_message(message.chat.id, lang_vars['photoErr'])
        add_message_id(message.chat.id, nmess.message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if audio_url:
        if audio_url != "No file":
            try:
                response = requests.get(audio_url)
                if response.status_code == 200:
                    nmess = bot.send_audio(message.chat.id, audio_url)
                else:
                    nmess = bot.send_message(message.chat.id, lang_vars['audioMis'])
            except requests.exceptions.RequestException:
                nmess = bot.send_message(message.chat.id, lang_vars['audioErr'])
            add_message_id(message.chat.id, nmess.message_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if language[message.chat.id] == "spanish":
        button1 = types.KeyboardButton("Eliminar bloque")
        button2 = types.KeyboardButton("Editar nombre corto")
        button3 = types.KeyboardButton("Editar audio")
        button4 = types.KeyboardButton("Editar foto")
        button5 = types.KeyboardButton("Editar descripci√≥n")
        button = types.KeyboardButton("Atr√°s")
        text = "Selecciona la acci√≥n que deseas realizar en el bloque."
    elif language[message.chat.id] == "english":
        button1 = types.KeyboardButton("Remove block")
        button2 = types.KeyboardButton("Edit short name")
        button3 = types.KeyboardButton("Edit audio")
        button4 = types.KeyboardButton("Edit photo")
        button5 = types.KeyboardButton("Edit description")
        button = types.KeyboardButton("Back")
        text = "Select the action you want to perform on the block."
    elif language[message.chat.id] == "russian":
        button1 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫")
        button2 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è")
        button3 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞—É–¥–∏–æ")
        button4 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
        button5 = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ")
        button = types.KeyboardButton("–ù–∞–∑–∞–¥")
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –Ω–∞–¥ –±–ª–æ–∫–æ–º."
    markup.row(button2, button3)
    markup.row(button4, button5)
    markup.row(button1)
    markup.row(button)
    bot.send_message(message.chat.id, text=text, reply_markup=markup)
    user_state[message.chat.id] = 'EDIT_BLOCK_GOLD'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'EDIT_BLOCK_GOLD')
def handle_block_edit_gold(message):
    global user_state
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        short_name[message.chat.id] = ""
        handle_edit_lang(message)
        return
    
    elif message.text in ["–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫", "Remove block", "Eliminar bloque"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("S√≠")
            button2 = types.KeyboardButton("Atr√°s")
            text = "¬øEst√°s seguro de que deseas eliminar el block?"
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("Back")
            text = "Are you sure you want to delete the block?"
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–∞–∑–∞–¥")
            text = "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª–æ–∫?"
        markup.row(button1)
        markup.row(button2)
        bot.send_message(message.chat.id, text=text, reply_markup=markup)
        user_state[message.chat.id] = 'BLOCK_DELETE_GOLD'

    elif message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è", "Edit short name", "Editar nombre corto"]:
        if language[message.chat.id] == "spanish":
            text = "Ingrese un nuevo nombre corto para el bloque. Aparecer√° en el bot√≥n del cliente y en el men√∫ del editor."
        elif language[message.chat.id] == "english":
            text = "Enter a new short name for the block. It will appear on the client's button and in the editor menu."
        elif language[message.chat.id] == "russian":
            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è –±–ª–æ–∫–∞. –û–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ –∫–Ω–æ–ø–∫–µ —É –∫–ª–∏–µ–Ω—Ç–∞ –∏ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞."
        bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
        user_state[message.chat.id] = 'BLOCK_SHORT_NAME_GOLD'

    elif message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –∞—É–¥–∏–æ", "Edit audio", "Editar audio"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(message.chat.id, text="¬øPrefieres el audio?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(message.chat.id, text="Do we add audio tape?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(message.chat.id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª?", reply_markup=markup)
        user_state[message.chat.id] = 'CONF_AUDIO_GOLD'

    elif message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ", "Edit photo", "Editar foto"]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if language[message.chat.id] == "spanish":
            button1 = types.KeyboardButton("Si")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(message.chat.id, text="¬øPrefieres el foto?", reply_markup=markup)
        elif language[message.chat.id] == "english":
            button1 = types.KeyboardButton("Yes")
            button2 = types.KeyboardButton("No")
            markup.row(button1, button2)
            bot.send_message(message.chat.id, text="Do we add photo?", reply_markup=markup)
        elif language[message.chat.id] == "russian":
            button1 = types.KeyboardButton("–î–∞")
            button2 = types.KeyboardButton("–ù–µ—Ç")
            markup.row(button1, button2)
            bot.send_message(message.chat.id, text="–ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ?", reply_markup=markup)
        user_state[message.chat.id] = 'CONF_PHOTO_GOLD'

    elif message.text in ["–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", "Edit description", "Editar descripci√≥n"]:
        if language[message.chat.id] == "spanish":
            text = "Ingrese una nueva descripci√≥n de bloque."
        elif language[message.chat.id] == "english":
            text = "Enter a new block description."
        elif language[message.chat.id] == "russian":
            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–∫–∞."
        bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
        user_state[message.chat.id] = 'BLOCK_DESCRIPTION_GOLD'

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'BLOCK_DELETE_GOLD')
def handle_block_delete_gold(message):
    global user_state, short_name
    if message.text in ['–ù–∞–∑–∞–¥', 'Back', 'Atr√°s']:
        short_name[message.chat.id] = ""
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        handle_edit_lang(message)
        return
    order = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).child('order').get()
    block_ref_name = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id])
    block_ref_name.delete()
    points = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').get()
    for srt_nm in points:
        cur_ord = points[srt_nm]['order']
        if cur_ord > order:
            points[srt_nm]['order'] = cur_ord - 1
    block_ref = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points')
    block_ref.set(points)
    if language[message.chat.id] == "spanish":
        text = "Bloque eliminado exitosamente."
    elif language[message.chat.id] == "english":
        text = "Block successfully removed."
    elif language[message.chat.id] == "russian":
        text = "–ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω."
    bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
    short_name[message.chat.id] = ""
    user_state[message.chat.id] = 'EDIT_LANG_FIRST'
    handle_edit_lang(message)

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'BLOCK_SHORT_NAME_GOLD')
def handle_block_short_name_gold(message):
    global user_state, short_name
    point = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).get()
    database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).delete()
    database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(message.text).set(point)

    if language[message.chat.id] == "spanish":
        text = f"El nombre del bloque se cambi√≥ correctamente a {message.text}."
    elif language[message.chat.id] == "english":
        text = f"Block successfully renamed to {message.text}."
    elif language[message.chat.id] == "russian":
        text = f"–ë–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –Ω–∞ {message.text}."
    bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
    short_name[message.chat.id] = message.text
    user_state[message.chat.id] = 'EDIT_LANG_FIRST'
    edit_selected_block_cont(message)

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'CONF_AUDIO_GOLD')
def handle_block_audio_gold(message):
    global user_state, short_name
    point = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).get()
    user_id = message.chat.id

    if message.text in ["–î–∞", "Yes", "Si"]:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Enviar un archivo de audio: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Send an audio file: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = 'ADD_AUDIO_GOLD'
    elif message.text in ["–ù–µ—Ç", "No"]:
        point['audio'] = "No file"
        database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).child('audio').delete()
        database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).set(point)
        if language[message.chat.id] == "spanish":
            text = "A√±adiendo completado."
        elif language[message.chat.id] == "english":
            text = "Addition completed."
        elif language[message.chat.id] == "russian":
            text = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
        bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())

        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        edit_selected_block_cont(message)

@bot.message_handler(content_types=['audio'], func=lambda message: user_state.get(message.chat.id) == 'ADD_AUDIO_GOLD')
def add_block_audio_gold(message):
    global user_state, short_name
    point = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).get()
    user_id = message.chat.id
    try:
        file_info = bot.get_file(message.audio.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_name = f"{modif_code[message.chat.id]}_{curr_lang_glob[message.chat.id]}_{short_name[message.chat.id]}.mp3"
        #print(file_name)
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Firebase Storage
        blob = bucket.blob(file_name)
        blob.upload_from_string(downloaded_file, content_type='audio/mpeg')
        blob.make_public()
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞
        audio_url = blob.public_url
        point['audio'] = audio_url
        database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).child('audio').delete()
        database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).set(point)
        if language[message.chat.id] == "spanish":
            text = "A√±adiendo completado."
        elif language[message.chat.id] == "english":
            text = "Addition completed."
        elif language[message.chat.id] == "russian":
            text = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
        bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
        
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        edit_selected_block_cont(message)
    except Exception as e:
        bot.send_message(user_id, f"Error al procesar el archivo de audio: {str(e)}")
        logger.error(f"Error processing audio file: {str(e)}")
        edit_selected_block_cont(message)

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'CONF_PHOTO_GOLD')
def handle_block_photo_gold(message):
    global user_state, short_name
    point = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).get()
    user_id = message.chat.id
    if message.text in ["–î–∞", "Yes", "Si"]:
        if language[message.chat.id] == "spanish":
            bot.send_message(user_id, text="Enviar una foto: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "english":
            bot.send_message(user_id, text="Send photo: ", reply_markup=types.ReplyKeyboardRemove())
        elif language[message.chat.id] == "russian":
            bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é: ", reply_markup=types.ReplyKeyboardRemove())
        user_state[user_id] = 'ADD_PHOTO_GOLD'
    elif message.text in ["–ù–µ—Ç", "No"]:
        point['photo'] = "No file"
        database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).child('photo').delete()
        database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).set(point)
        if language[message.chat.id] == "spanish":
            text = "A√±adiendo completado."
        elif language[message.chat.id] == "english":
            text = "Addition completed."
        elif language[message.chat.id] == "russian":
            text = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
        bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
        
        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        edit_selected_block_cont(message)

@bot.message_handler(content_types=['photo'], func=lambda message: user_state.get(message.chat.id) == 'ADD_PHOTO_GOLD')
def add_photo_edit(message):
    global short_name, user_state
    point = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).get()
    user_id = message.chat.id
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_name = f"{modif_code[message.chat.id]}_{curr_lang_glob[message.chat.id]}_{short_name[message.chat.id]}_photo.jpg"
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Firebase Storage
        blob = bucket.blob(file_name)
        blob.upload_from_string(downloaded_file, content_type='image/jpeg')
        blob.make_public()
        # –ü–æ–ª—É—á–µ–Ω–∏–µ URL —Ñ–∞–π–ª–∞
        photo_url = blob.public_url
        point['photo'] = photo_url
        database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).child('photo').delete()
        database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).set(point)
        if language[message.chat.id] == "spanish":
            text = "A√±adiendo completado."
        elif language[message.chat.id] == "english":
            text = "Addition completed."
        elif language[message.chat.id] == "russian":
            text = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
        bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())

        user_state[message.chat.id] = 'EDIT_LANG_FIRST'
        edit_selected_block_cont(message)
    except Exception as e:
        bot.send_message(user_id, f"Error al procesar el archivo de photo: {str(e)}")
        logger.error(f"Error processing photo file: {str(e)}")
        edit_selected_block_cont(message)

@bot.message_handler(func=lambda message: user_state.get(message.chat.id) == 'BLOCK_DESCRIPTION_GOLD')
def handle_block_description_gold(message):
    global user_state, short_name
    point = database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).get()
    database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).child('description').delete()
    point['description'] = message.text
    database.child('blocks').child(modif_code[message.chat.id]).child(curr_lang_glob[message.chat.id]).child('points').child(short_name[message.chat.id]).set(point)

    if language[message.chat.id] == "spanish":
        text = "Descripci√≥n agregada"
    elif language[message.chat.id] == "english":
        text = "Description added"
    elif language[message.chat.id] == "russian":
        text = "–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
    bot.send_message(message.chat.id, text=text, reply_markup=types.ReplyKeyboardRemove())
    
    user_state[message.chat.id] = 'EDIT_LANG_FIRST'
    edit_selected_block_cont(message)

#-----------------------FIN EDIT LANGUAGE--------------------------

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error("Error while polling: %s", str(e))
